# Form implementation generated from reading ui file 'A_D.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMainWindow
import pandas as pd
import numpy as np
import math
from scipy import stats
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
from scipy.stats import anderson, normaltest
from statsmodels.stats.diagnostic import normal_ad

class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(404, 292)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_7 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(280, 220, 75, 24))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(30, 230, 75, 24))
        self.pushButton.setObjectName("pushButton")
        self.listView = QtWidgets.QListView(parent=self.centralwidget)
        self.listView.setGeometry(QtCore.QRect(10, 10, 131, 192))
        self.listView.setObjectName("listView")
        self.pushButton_8 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(280, 190, 75, 24))
        self.pushButton_8.setObjectName("pushButton_8")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(170, 20, 54, 16))
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(220, 20, 113, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(170, 60, 81, 16))
        self.label_2.setObjectName("label_2")
        self.radioButton = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.radioButton.setGeometry(QtCore.QRect(170, 90, 141, 20))
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.radioButton_2.setGeometry(QtCore.QRect(170, 120, 131, 20))
        self.radioButton_2.setObjectName("radioButton_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.pushButton_7.clicked.connect(self.on_cancel_button_clicked)
        self.pushButton_8.clicked.connect(self.on_confirm_button_clicked)
        self.pushButton.clicked.connect(self.on_pushButton_clicked)  # 新增：连接 pushButton 的点击事件

        # 设置 radioButton 为默认点击状态
        self.radioButton.setChecked(True)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_7.setText(_translate("MainWindow", "取消"))
        self.pushButton.setText(_translate("MainWindow", "选择"))
        self.pushButton_8.setText(_translate("MainWindow", "确定"))
        self.label.setText(_translate("MainWindow", "变量(V)："))
        self.label_2.setText(_translate("MainWindow", "正态性检验："))
        self.radioButton.setText(_translate("MainWindow", "Anderson-Darling(A)"))
        self.radioButton_2.setText(_translate("MainWindow", "Shapiro_Wilk(S)"))

    def __init__(self, main_window):
        super().__init__()
        # 保存主窗口对象
        self.main_window = main_window
        self.all_table_data = []  # 用于存储所有表格数据
        self.setupUi(self)
        self.get_table_data()
     #获取主窗口调用的数据-------------------------------------

    def get_table_data(self):
        table = self.main_window.tableWidget
        rows = table.rowCount()
        columns = table.columnCount()
        print(f"表格行数: {rows}, 列数: {columns}")  # 添加调试信息

        data = []
        for row in range(rows):
            row_data = []
            for col in range(columns):
                item = table.item(row, col)
                if item is not None:
                    row_data.append(item.text())
                else:
                    row_data.append(None)
            data.append(row_data)
        print("获取到的主窗口表格数据:", data)

        # 筛选出有数据的列
        valid_columns = []
        for col in range(columns):
            has_data = False
            for row in range(rows):
                if data[row][col] is not None and data[row][col].strip():
                    has_data = True
                    break
            if has_data:
                valid_columns.append(col)

        # 生成列名
        column_names = [f"c{i + 1}" for i in valid_columns]

        # 创建模型并设置数据
        model = QtGui.QStandardItemModel()
        for name in column_names:
            item = QtGui.QStandardItem(name)
            model.appendRow(item)

        # 将模型设置给 listView
        self.listView.setModel(model)
        self.all_table_data = data  # 保存所有表格数据

    def on_pushButton_clicked(self):
        selected_indexes = self.listView.selectedIndexes()
        if selected_indexes:
            selected_column_names = [index.data() for index in selected_indexes]
            # 将选中的列名显示在 lineEdit 文本框中
            self.lineEdit.setText(", ".join(selected_column_names))

    def on_confirm_button_clicked(self):
        # 获取 lineEdit 中的列名
        column_names = self.lineEdit.text().strip().split(',')
        column_names = [name.strip() for name in column_names if name.strip()]

        # 从 all_table_data 中提取相应的列数据
        dataset = []
        for col_name in column_names:
            col_index = int(col_name[1:]) - 1  # 假设列名格式为 c1, c2, ...
            column_data = []
            for row in self.all_table_data:
                try:
                    if row[col_index] is not None and row[col_index].strip():
                        column_data.append(float(row[col_index]))
                except ValueError:
                    continue  # 如果数据不是数字，则跳过该数据
            # 过滤异常值
            mean = np.mean(column_data)
            std = np.std(column_data)
            lower_bound = mean - 3 * std
            upper_bound = mean + 3 * std
            filtered_data = [x for x in column_data if lower_bound <= x <= upper_bound]
            dataset.extend(filtered_data)  # 将过滤后的列数据添加到数据集中

        # 检查数据集是否为空
        if not dataset:
            print("错误：没有有效的数据可供计算。")
            return

        # 将数据集转换为 NumPy 数组，并确保数据类型为 float
        try:
            dataset = np.array(dataset, dtype=float)
            print(dataset)
        except ValueError as e:
            print(f"数据转换错误: {e}")
            return

        if self.radioButton.isChecked():
            result = anderson(dataset, dist='norm')
            _, p_value = normal_ad(dataset)
            n = len(dataset)
            print(f"AD统计量: {result.statistic:.3f}")
            print(f"临界值: {result.critical_values}")
            print(f"显著性水平: {result.significance_level}")
            print(f"P值: {p_value:.3f}")
            A_D(dataset)
            self.close()
        elif self.radioButton_2.isChecked():
            try:
                stat, p = stats.shapiro(dataset)
                print(f"Shapiro-Wilk统计量: {stat:.3f}")
                print(f"P值: {p:.3f}")
            except ValueError as e:
                print(f"数据转换错误: {e}")
                return

            Shapiro_Wilk(dataset)
            self.close()


    def on_cancel_button_clicked(self):
        self.close()




def A_D(data):
    result = anderson(data, dist='norm')
    _, p_value = normal_ad(data)
    n = len(data)

    plt.figure(figsize=(8, 6))
    stats.probplot(data, dist="norm", plot=plt)
    plt.title('A-D Q-Q Plot')

    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False
    plt.text(0.05, 0.90, '均值:    {:.2f}'.format(data.mean()), fontsize=15, transform=plt.gca().transAxes,
             va='top',
             ha='left')
    plt.text(0.05, 0.85, '标准差:  {:.2f}'.format(data.std()), fontsize=15, transform=plt.gca().transAxes,
             va='top',
             ha='left')
    plt.text(0.05, 0.80, 'N:       {:d}'.format(n), fontsize=15, transform=plt.gca().transAxes, va='top',
             ha='left')
    plt.text(0.05, 0.75, 'AD:      {:.3f}'.format(result.statistic), fontsize=15, transform=plt.gca().transAxes,
             va='top', ha='left')
    plt.text(0.05, 0.70, 'P值:     {:.3f}'.format(p_value), fontsize=15, transform=plt.gca().transAxes,
             va='top',
             ha='left')
    plt.show()

def Shapiro_Wilk(x):
    stat, p = stats.shapiro(x)
    n = len(x)

    plt.figure(figsize=(8, 6))
    stats.probplot(x, dist="norm", plot=plt)
    plt.title('Shapiro-Wilk Q-Q Plot')

    plt.rcParams['font.sans-serif'] = ['SimHei']
    plt.rcParams['axes.unicode_minus'] = False
    plt.text(0.05, 0.90, '均值:     {:.2f}'.format(x.mean()), fontsize=15, transform=plt.gca().transAxes, va='top',ha='left')
    plt.text(0.05, 0.85, '标准差:   {:.2f}'.format(x.std()), fontsize=15, transform=plt.gca().transAxes, va='top',ha='left')
    plt.text(0.05, 0.80, 'N:        {:d}'.format(n), fontsize=15, transform=plt.gca().transAxes, va='top',ha='left')
    plt.text(0.05, 0.75, 'S-W:      {:.2f}'.format(stat), fontsize=15, transform=plt.gca().transAxes,va='top', ha='left')
    plt.text(0.05, 0.70, 'P值:      {:.4f}'.format(p), fontsize=15, transform=plt.gca().transAxes, va='top',ha='left')
    plt.show()