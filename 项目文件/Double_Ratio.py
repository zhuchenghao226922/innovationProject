# Form implementation generated from reading ui file 'untitled7.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import numpy as np
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMainWindow, QMessageBox
from scipy import stats


class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(523, 594)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.radioButton_3 = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.radioButton_3.setGeometry(QtCore.QRect(230, 230, 86, 16))
        self.radioButton_3.setObjectName("radioButton_3")
        self.pushButton_5 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(30, 510, 75, 23))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(80, 460, 75, 23))
        self.pushButton_6.setObjectName("pushButton_6")
        self.label_7 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(310, 250, 54, 12))
        self.label_7.setObjectName("label_7")
        self.label_5 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(250, 260, 54, 12))
        self.label_5.setObjectName("label_5")
        self.label_8 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(400, 250, 54, 12))
        self.label_8.setObjectName("label_8")
        self.listView_11 = QtWidgets.QListView(parent=self.centralwidget)
        self.listView_11.setGeometry(QtCore.QRect(30, 30, 181, 421))
        self.listView_11.setObjectName("listView_11")
        self.textEdit_10 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_10.setGeometry(QtCore.QRect(400, 260, 71, 31))
        self.textEdit_10.setObjectName("textEdit_10")
        self.textEdit_15 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_15.setGeometry(QtCore.QRect(310, 260, 71, 31))
        self.textEdit_15.setObjectName("textEdit_15")
        self.label_6 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(250, 300, 54, 12))
        self.label_6.setObjectName("label_6")
        self.textEdit_13 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_13.setGeometry(QtCore.QRect(400, 300, 71, 31))
        self.textEdit_13.setObjectName("textEdit_13")
        self.textEdit_14 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_14.setGeometry(QtCore.QRect(310, 300, 71, 31))
        self.textEdit_14.setObjectName("textEdit_14")
        self.textEdit_5 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_5.setGeometry(QtCore.QRect(300, 90, 101, 31))
        self.textEdit_5.setObjectName("textEdit_5")
        self.label_10 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(250, 160, 54, 12))
        self.label_10.setObjectName("label_10")
        self.radioButton_4 = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.radioButton_4.setGeometry(QtCore.QRect(230, 130, 141, 16))
        self.radioButton_4.setStyleSheet("font: 8pt \"Agency FB\";\n"
                                         "font: 8pt \"宋体\";")
        self.radioButton_4.setObjectName("radioButton_4")
        self.textEdit_6 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_6.setGeometry(QtCore.QRect(300, 190, 101, 31))
        self.textEdit_6.setObjectName("textEdit_6")
        self.label_15 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_15.setGeometry(QtCore.QRect(250, 100, 54, 12))
        self.label_15.setObjectName("label_15")
        self.label_16 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_16.setGeometry(QtCore.QRect(250, 60, 54, 12))
        self.label_16.setObjectName("label_16")
        self.textEdit_7 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_7.setGeometry(QtCore.QRect(300, 50, 101, 31))
        self.textEdit_7.setObjectName("textEdit_7")
        self.label_18 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_18.setGeometry(QtCore.QRect(250, 200, 54, 12))
        self.label_18.setObjectName("label_18")
        self.textEdit_8 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_8.setGeometry(QtCore.QRect(300, 150, 101, 31))
        self.textEdit_8.setObjectName("textEdit_8")
        self.radioButton_6 = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.radioButton_6.setGeometry(QtCore.QRect(230, 30, 131, 16))
        self.radioButton_6.setStyleSheet("font: 8pt \"Agency FB\";\n"
                                         "font: 8pt \"宋体\";")
        self.radioButton_6.setObjectName("radioButton_6")
        self.label_17 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_17.setGeometry(QtCore.QRect(240, 430, 61, 16))
        self.label_17.setStyleSheet("font: 8pt \"宋体\";")
        self.label_17.setObjectName("label_17")
        self.label_19 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_19.setGeometry(QtCore.QRect(240, 390, 61, 16))
        self.label_19.setStyleSheet("font: 8pt \"宋体\";")
        self.label_19.setObjectName("label_19")
        self.comboBox_2 = QtWidgets.QComboBox(parent=self.centralwidget)
        self.comboBox_2.setGeometry(QtCore.QRect(310, 420, 101, 31))
        self.comboBox_2.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.pushButton_11 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_11.setGeometry(QtCore.QRect(390, 520, 75, 23))
        self.pushButton_11.setObjectName("pushButton_11")
        self.label_20 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_20.setGeometry(QtCore.QRect(240, 350, 61, 16))
        self.label_20.setStyleSheet("font: 8pt \"宋体\";")
        self.label_20.setObjectName("label_20")
        self.textEdit_18 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_18.setGeometry(QtCore.QRect(310, 380, 101, 31))
        self.textEdit_18.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textEdit_18.setObjectName("textEdit_18")
        self.pushButton_14 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_14.setGeometry(QtCore.QRect(300, 520, 75, 23))
        self.pushButton_14.setObjectName("pushButton_14")
        self.label_23 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_23.setGeometry(QtCore.QRect(220, 330, 41, 20))
        self.label_23.setObjectName("label_23")
        self.textEdit_21 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_21.setGeometry(QtCore.QRect(310, 340, 101, 31))
        self.textEdit_21.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.textEdit_21.setObjectName("textEdit_21")
        self.checkBox = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(240, 460, 201, 21))
        self.checkBox.setObjectName("checkBox")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.pushButton_11.clicked.connect(MainWindow.close)
        self.pushButton_6.clicked.connect(self.add_selected_column_to_textedit)  # 连接按钮点击事件
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # 添加按钮点击事件
        self.radioButton_6.clicked.connect(self.handle_radio1_click)
        #self.radioButton_4.clicked.connect(self.handle_radio2_click)
        self.radioButton_3.clicked.connect(self.handle_radio3_click)
        self.pushButton_14.clicked.connect(self.on_confirm_button_click)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "双比率"))
        self.radioButton_3.setText(_translate("MainWindow", "汇总数据(Z)"))
        self.pushButton_5.setText(_translate("MainWindow", "帮助"))
        self.pushButton_6.setText(_translate("MainWindow", "选择"))
        self.label_7.setText(_translate("MainWindow", "事件"))
        self.label_5.setText(_translate("MainWindow", "第一(F):"))
        self.label_8.setText(_translate("MainWindow", "试验"))
        self.label_6.setText(_translate("MainWindow", "第二(S):"))
        self.label_10.setText(_translate("MainWindow",
                                         "<html><head/><body><p><span style=\" font-size:8pt;\">第一(F):</span></p></body></html>"))
        self.radioButton_4.setText(_translate("MainWindow", "样本在不同列中(D):"))
        self.label_15.setText(_translate("MainWindow",
                                         "<html><head/><body><p><span style=\" font-size:8pt;\">下标(U):</span></p></body></html>"))
        self.label_16.setText(_translate("MainWindow",
                                         "<html><head/><body><p><span style=\" font-size:8pt;\">样本(M):</span></p></body></html>"))
        self.label_18.setText(_translate("MainWindow",
                                         "<html><head/><body><p><span style=\" font-size:8pt;\">第二(S):</span></p></body></html>"))
        self.radioButton_6.setText(_translate("MainWindow", "样本在一列中(N)"))
        self.label_17.setText(_translate("MainWindow", "备择(A):"))
        self.label_19.setText(_translate("MainWindow", "检验差值(T):"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "小于"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "不等于"))
        self.comboBox_2.setItemText(2, _translate("MainWindow", "大于"))
        self.pushButton_11.setText(_translate("MainWindow", "取消"))
        self.label_20.setText(_translate("MainWindow", "置信水平(C):"))
        self.pushButton_14.setText(_translate("MainWindow", "确定(O)"))
        self.label_23.setText(_translate("MainWindow",
                                         "<html><head/><body><p><span style=\" font-size:8pt; font-weight:600; color:#545454;\">选项</span></p></body></html>"))
        self.checkBox.setText(_translate("MainWindow", "使用p的合并估计值进行检验(V)"))
        self.textEdit_18.setPlainText("95.0")  # 置信水平默认值
        self.textEdit_21.setPlainText("0.0")  # 检验差值默认值
        self.comboBox_2.setCurrentIndex(2)
    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window
        self.all_table_data = []  # 用于存储所有表格数据
        self.setupUi(self)
        self.get_table_data()
        self.target_text_edit = None  # 新增属性，用于存储目标文本框

        # 为每个文本框添加鼠标点击事件，点击时设置目标文本框
        text_edits = [self.textEdit_10, self.textEdit_15, self.textEdit_13, self.textEdit_14,
                      self.textEdit_5, self.textEdit_6, self.textEdit_7, self.textEdit_8]
        for text_edit in text_edits:
            text_edit.mousePressEvent = lambda event, te=text_edit: self.set_target_text_edit(te)

    def set_target_text_edit(self, text_edit):
        self.target_text_edit = text_edit

    def get_table_data(self):
        table = self.main_window.tableWidget
        rows = table.rowCount()
        columns = table.columnCount()
        print(f"表格行数: {rows}, 列数: {columns}")  # 添加调试信息

        data = []
        for row in range(rows):
            row_data = []
            for col in range(columns):
                item = table.item(row, col)
                if item is not None:
                    row_data.append(item.text())
                else:
                    row_data.append(None)
            data.append(row_data)
        print("获取到的主窗口表格数据:", data)

        # 筛选出有数据的列
        valid_columns = []
        for col in range(columns):
            has_data = False
            for row in range(rows):
                if data[row][col] is not None and data[row][col].strip():
                    has_data = True
                    break
            if has_data:
                valid_columns.append(col)

        # 生成列名
        column_names = [f"c{i + 1}" for i in valid_columns]

        # 创建模型并设置数据
        model = QtGui.QStandardItemModel()
        for name in column_names:
            item = QtGui.QStandardItem(name)
            model.appendRow(item)

        # 将模型设置给 listView_11
        self.listView_11.setModel(model)
        self.all_table_data = data  # 保存所有表格数据

    def add_selected_column_to_textedit(self):
        """进行数据的选定"""
        # 获取列表视图中选中的索引
        selected_indexes = self.listView_11.selectedIndexes()

        # 检查是否有选中的列
        if not selected_indexes:
            print("请先在列列表中选择要添加的列名")
            return

        # 获取选中的列名（取第一个选中项）
        selected_item = selected_indexes[0].data()
        print(f"已选择列名: {selected_item}")

        # 检查目标文本框是否已指定（通过点击文本框初始化）
        if not hasattr(self, 'target_text_edit') or self.target_text_edit is None:
            print("错误：未指定目标文本框，请先点击需要添加列名的文本框")
            return

        # 直接覆盖文本框内容（确保始终只保留最后选择的列名）
        self.target_text_edit.setText(selected_item)
        print(f"列名已更新到目标文本框: {selected_item}")

    #方法 1：对应 radioButton 点击
    def handle_radio1_click(self):
        """ 样本在同一列"""
        if self.radioButton_6.isChecked():
            # 执行 radioButton 对应的逻辑
            print("RadioButton 1 被选中")
            # 这里添加具体功能代码

    #方法 2：对应 radioButton_2 点击
    def handle_radio2_click(self):
        """样本在不同列"""
        print("【handle_radio2_click】开始执行")

        # 获取文本框中的列名
        column_name_1 = self.textEdit_8.toPlainText().strip()
        column_name_2 = self.textEdit_6.toPlainText().strip()

        print(column_name_1)
        print(column_name_2)
        if not column_name_1 or not column_name_2:
            print("错误：列名输入为空，请选择有效列名")
            return

        # 获取所有表格数据
        all_rows = self.all_table_data
        if not all_rows:
            print("错误：表格数据为空")
            return

        # 获取有效列名（c1, c2...）对应的实际列索引
        try:
            # 解析列名（假设列名格式为c1, c2等）
            col_idx1 = int(column_name_1[1:]) - 1  # 例如 c1 -> 索引0
            col_idx2 = int(column_name_2[1:]) - 1
        except (IndexError, ValueError):
            print("错误：列名格式应为c1, c2等")
            return

        # 检查列索引是否合法
        max_col = len(all_rows[0]) - 1
        if col_idx1 < 0 or col_idx1 > max_col or col_idx2 < 0 or col_idx2 > max_col:
            print("错误：列索引超出范围")
            return

        # 提取数据并转换为浮点数
        data_sample1 = []
        data_sample2 = []

        for row_idx, row in enumerate(all_rows):
            # 跳过空行
            if not row:
                continue

            # 处理第一列数据
            val1 = row[col_idx1] if col_idx1 < len(row) else None
            try:
                if val1 is not None and val1.strip():
                    data_sample1.append(float(val1))
            except ValueError:
                if row_idx == 0:  # 假设第一行可能是标题，允许跳过
                    print(f"警告：跳过第一行标题（列{column_name_1}）")
                else:
                    print(f"警告：第{row_idx + 1}行，列{column_name_1}无效数据: {val1}")

            # 处理第二列数据
            val2 = row[col_idx2] if col_idx2 < len(row) else None
            try:
                if val2 is not None and val2.strip():
                    data_sample2.append(float(val2))
            except ValueError:
                if row_idx == 0:
                    print(f"警告：跳过第一行标题（列{column_name_2}）")
                else:
                    print(f"警告：第{row_idx + 1}行，列{column_name_2}无效数据: {val2}")

        # 数据有效性检查
        if len(data_sample1) < 2 or len(data_sample2) < 2:
            print("错误：单样本有效数据不足（至少需要2个有效值）")
            print(f"样本1数量: {len(data_sample1)}, 样本2数量: {len(data_sample2)}")
            return

        # 存储数据供后续使用
        self.data_sample1 = data_sample1
        self.data_sample2 = data_sample2

        print(f"样本1数据（前10项）: {data_sample1[:10]} (总数: {len(data_sample1)})")
        print(f"样本2数据（前10项）: {data_sample2[:10]} (总数: {len(data_sample2)})")
        print("【handle_radio2_click】执行结束\n")

    # 方法 3：对应 radioButton_3 点击
    def handle_radio3_click(self):
        """汇总数据"""
        if self.radioButton_3.isChecked():
            # 执行 radioButton_3 对应的逻辑
            print("RadioButton 3 被选中")
            try:
                # 获取汇总数据
                event1 = float(self.textEdit_15.toPlainText())
                trial1 = float(self.textEdit_10.toPlainText())
                event2 = float(self.textEdit_14.toPlainText())
                trial2 = float(self.textEdit_13.toPlainText())

                # 数据有效性检查
                if trial1 <= 0 or trial2 <= 0 or event1 < 0 or event2 < 0 or event1 > trial1 or event2 > trial2:
                    print("错误：汇总数据无效，请检查输入")
                    return

                # 存储数据供后续使用
                self.data_sample1 = [event1, trial1]
                self.data_sample2 = [event2, trial2]

                print(f"样本1：事件数 = {event1}, 试验数 = {trial1}")
                print(f"样本2：事件数 = {event2}, 试验数 = {trial2}")
            except ValueError:
                print("错误：汇总数据输入不是有效的数字，请检查输入")

    # 获取数据进行双比率检验
    def perform_double_ratio_test(self):
        """执行双比率检验"""

        # 数据检查
        if not hasattr(self, 'data_sample1') or not hasattr(self, 'data_sample2'):
            debug_msg = "错误：未找到data_sample1或data_sample2属性"
            print(f"[DEBUG] {debug_msg}")
            QMessageBox.warning(self, "错误", "请先选择数据列并点击确定按钮")
            return

        try:
            # 获取参数
            use_pooled_estimate = self.checkBox.isChecked()
            conf_level = float(self.textEdit_18.toPlainText())
            test_diff = float(self.textEdit_21.toPlainText())
            hypothesis_relation = self.comboBox_2.currentText()

            if self.radioButton_3.isChecked():
                # 汇总数据
                event1, trial1 = self.data_sample1
                event2, trial2 = self.data_sample2
            else:
                # 样本数据
                event1 = sum([1 for x in self.data_sample1 if x == 1])
                trial1 = len(self.data_sample1)
                event2 = sum([1 for x in self.data_sample2 if x == 1])
                trial2 = len(self.data_sample2)

            # 计算样本比率
            p1 = event1 / trial1
            p2 = event2 / trial2

            # 确定检验方向
            if "小于" in hypothesis_relation:
                alt_scipy = "less"
                direction_symbol = "<"
            elif "大于" in hypothesis_relation:
                alt_scipy = "greater"
                direction_symbol = ">"
            else:
                alt_scipy = "two-sided"
                direction_symbol = "≠"

            if use_pooled_estimate:
                # 使用合并估计值
                p_pooled = (event1 + event2) / (trial1 + trial2)
                se = np.sqrt(p_pooled * (1 - p_pooled) * (1 / trial1 + 1 / trial2))
            else:
                # 不使用合并估计值
                se = np.sqrt(p1 * (1 - p1) / trial1 + p2 * (1 - p2) / trial2)

            # 计算检验统计量
            z_stat = ((p1 - p2) - test_diff) / se

            # 计算p值
            if alt_scipy == "two-sided":
                p_value = 2 * stats.norm.sf(np.abs(z_stat))
            elif alt_scipy == "less":
                p_value = stats.norm.cdf(z_stat)
            else:
                p_value = stats.norm.sf(z_stat)

            # 置信区间计算
            z_critical = stats.norm.ppf(1 - (1 - conf_level / 100) / 2)
            ci_lower = (p1 - p2) - z_critical * se
            ci_upper = (p1 - p2) + z_critical * se

            if direction_symbol == '<':
                ci_display = f"{ci_upper:.4f}"
            elif direction_symbol == '>':
                ci_display = f"{ci_lower:.4f}"
            else:
                ci_display = f"[{ci_lower:.4f}, {ci_upper:.4f}]"

            # 格式化输出
            result = (
                f"=== 双比率检验结果 ===\n"
                f"差值 = p1 - p2\n"
                f"差值估计: {p1 - p2:.4f}\n"
                f"差值的 {conf_level}% 置信{'上限' if direction_symbol == '<' else '下限' if direction_symbol == '>' else '区间'}: {ci_display}\n"
                f"差值 = {test_diff} (与 {direction_symbol}) 的 Z 检验: "
                f"Z 值 = {z_stat:.2f} P 值 = {p_value:.4f}\n"
                f"样本比率: p1 = {p1:.4f}, p2 = {p2:.4f}\n"
                f"样本量: n1 = {trial1}, n2 = {trial2}\n"
            )

            self.main_window.display_text(result)
        except Exception as e:
            debug_msg = f"计算过程中发生错误: {str(e)}"
            print(f"[DEBUG] {debug_msg}")
            QMessageBox.critical(self, "错误", debug_msg)
            return

    # 方法 4：确定按钮点击时调用
    def on_confirm_button_click(self):
        # 检查当前选中的 RadioButton 并调用对应方法
        if self.radioButton_6.isChecked():
            self.handle_radio1_click()
        elif self.radioButton_4.isChecked():
            self.handle_radio2_click()
        elif self.radioButton_3.isChecked():
            self.handle_radio3_click()
        else:
            # 处理未选中情况（可选）
            print("未选择任何 RadioButton")
            return
        self.perform_double_ratio_test()
