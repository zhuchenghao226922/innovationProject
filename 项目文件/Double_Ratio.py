# Form implementation generated from reading ui file 'untitled7.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMainWindow


class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(476, 433)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.radioButton = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.radioButton.setGeometry(QtCore.QRect(170, 40, 131, 16))
        self.radioButton.setObjectName("radioButton")
        self.textEdit = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(240, 60, 101, 21))
        self.textEdit.setObjectName("textEdit")
        self.textEdit_4 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_4.setGeometry(QtCore.QRect(240, 170, 101, 21))
        self.textEdit_4.setObjectName("textEdit_4")
        self.label_3 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(190, 150, 54, 12))
        self.label_3.setObjectName("label_3")
        self.pushButton_3 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(350, 350, 75, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.radioButton_3 = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.radioButton_3.setGeometry(QtCore.QRect(170, 210, 86, 16))
        self.radioButton_3.setObjectName("radioButton_3")
        self.textEdit_2 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_2.setGeometry(QtCore.QRect(240, 90, 101, 21))
        self.textEdit_2.setObjectName("textEdit_2")
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(190, 100, 54, 12))
        self.label_2.setObjectName("label_2")
        self.pushButton_5 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(20, 360, 75, 23))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(50, 310, 75, 23))
        self.pushButton_6.setObjectName("pushButton_6")
        self.label_7 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(250, 230, 54, 12))
        self.label_7.setObjectName("label_7")
        self.textEdit_3 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_3.setGeometry(QtCore.QRect(240, 140, 101, 21))
        self.textEdit_3.setObjectName("textEdit_3")
        self.label_5 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(190, 240, 54, 12))
        self.label_5.setObjectName("label_5")
        self.label_8 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(340, 230, 54, 12))
        self.label_8.setObjectName("label_8")
        self.pushButton_4 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(260, 350, 75, 23))
        self.pushButton_4.setObjectName("pushButton_4")
        self.listView_11 = QtWidgets.QListView(parent=self.centralwidget)
        self.listView_11.setGeometry(QtCore.QRect(30, 30, 121, 271))
        self.listView_11.setObjectName("listView_11")
        self.textEdit_10 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_10.setGeometry(QtCore.QRect(340, 240, 71, 21))
        self.textEdit_10.setObjectName("textEdit_10")
        self.label_4 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(190, 180, 54, 12))
        self.label_4.setObjectName("label_4")
        self.textEdit_15 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_15.setGeometry(QtCore.QRect(250, 240, 71, 21))
        self.textEdit_15.setObjectName("textEdit_15")
        self.label_6 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(190, 270, 54, 12))
        self.label_6.setObjectName("label_6")
        self.textEdit_13 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_13.setGeometry(QtCore.QRect(340, 270, 71, 21))
        self.textEdit_13.setObjectName("textEdit_13")
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(350, 320, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.textEdit_14 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_14.setGeometry(QtCore.QRect(250, 270, 71, 21))
        self.textEdit_14.setObjectName("textEdit_14")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(190, 70, 54, 12))
        self.label.setObjectName("label")
        self.radioButton_2 = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.radioButton_2.setGeometry(QtCore.QRect(170, 120, 141, 16))
        self.radioButton_2.setObjectName("radioButton_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.pushButton_3.clicked.connect(MainWindow.close)
        self.pushButton_6.clicked.connect(self.add_selected_column_to_textedit)  # 连接按钮点击事件
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # 添加按钮点击事件
        self.radioButton.clicked.connect(self.handle_radio1_click)
        self.radioButton_2.clicked.connect(self.handle_radio2_click)
        self.radioButton_3.clicked.connect(self.handle_radio3_click)
        self.pushButton_4.clicked.connect(self.on_confirm_button_click)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "双比率"))
        self.radioButton.setText(_translate("MainWindow", "样本在一列中(N)"))
        self.label_3.setText(_translate("MainWindow", "第一(F):"))
        self.pushButton_3.setText(_translate("MainWindow", "取消"))
        self.radioButton_3.setText(_translate("MainWindow", "汇总数据(Z)"))
        self.label_2.setText(_translate("MainWindow", "下标(U):"))
        self.pushButton_5.setText(_translate("MainWindow", "帮助"))
        self.pushButton_6.setText(_translate("MainWindow", "选择"))
        self.label_7.setText(_translate("MainWindow", "事件"))
        self.label_5.setText(_translate("MainWindow", "第一(F):"))
        self.label_8.setText(_translate("MainWindow", "试验"))
        self.pushButton_4.setText(_translate("MainWindow", "确定(O)"))
        self.label_4.setText(_translate("MainWindow", "第二(S):"))
        self.label_6.setText(_translate("MainWindow", "第二(S):"))
        self.pushButton_2.setText(_translate("MainWindow", "选项(P)..."))
        self.label.setText(_translate("MainWindow", "样本(M):"))
        self.radioButton_2.setText(_translate("MainWindow", "样本在不同列中(D):"))

    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window
        self.all_table_data = []  # 用于存储所有表格数据
        self.setupUi(self)
        self.get_table_data()
        self.target_text_edit = None  # 新增属性，用于存储目标文本框

        # 为每个文本框添加鼠标点击事件，点击时设置目标文本框
        text_edits = [self.textEdit, self.textEdit_2, self.textEdit_3, self.textEdit_4]
        for text_edit in text_edits:
            text_edit.mousePressEvent = lambda event, te=text_edit: self.set_target_text_edit(te)

    def set_target_text_edit(self, text_edit):
        self.target_text_edit = text_edit

    def get_table_data(self):
        table = self.main_window.tableWidget
        rows = table.rowCount()
        columns = table.columnCount()
        print(f"表格行数: {rows}, 列数: {columns}")  # 添加调试信息

        data = []
        for row in range(rows):
            row_data = []
            for col in range(columns):
                item = table.item(row, col)
                if item is not None:
                    row_data.append(item.text())
                else:
                    row_data.append(None)
            data.append(row_data)
        print("获取到的主窗口表格数据:", data)

        # 筛选出有数据的列
        valid_columns = []
        for col in range(columns):
            has_data = False
            for row in range(rows):
                if data[row][col] is not None and data[row][col].strip():
                    has_data = True
                    break
            if has_data:
                valid_columns.append(col)

        # 生成列名
        column_names = [f"c{i + 1}" for i in valid_columns]

        # 创建模型并设置数据
        model = QtGui.QStandardItemModel()
        for name in column_names:
            item = QtGui.QStandardItem(name)
            model.appendRow(item)

        # 将模型设置给 listView_11
        self.listView_11.setModel(model)
        self.all_table_data = data  # 保存所有表格数据

    def add_selected_column_to_textedit(self):
        """进行数据的选定"""
        # 获取列表视图中选中的索引
        selected_indexes = self.listView_11.selectedIndexes()

        # 检查是否有选中的列
        if not selected_indexes:
            print("请先在列列表中选择要添加的列名")
            return

        # 获取选中的列名（取第一个选中项）
        selected_item = selected_indexes[0].data()
        print(f"已选择列名: {selected_item}")

        # 检查目标文本框是否已指定（通过点击文本框初始化）
        if not hasattr(self, 'target_text_edit') or self.target_text_edit is None:
            print("错误：未指定目标文本框，请先点击需要添加列名的文本框")
            return

        # 直接覆盖文本框内容（确保始终只保留最后选择的列名）
        self.target_text_edit.setText(selected_item)
        print(f"列名已更新到目标文本框: {selected_item}")

    # 方法 1：对应 radioButton 点击
    def handle_radio1_click(self):
        """ 样本在同一列"""
        if self.radioButton.isChecked():
            # 执行 radioButton 对应的逻辑
            print("RadioButton 1 被选中")
            # 这里添加具体功能代码

    # 方法 2：对应 radioButton_2 点击
    def handle_radio2_click(self):
        """样本在不同列"""
        print("【handle_radio2_click】开始执行")

        # 获取文本框中的列名
        column_name_1 = self.textEdit_3.toPlainText().strip()
        column_name_2 = self.textEdit_4.toPlainText().strip()

        if not column_name_1 or not column_name_2:
            print("错误：列名输入为空，请选择有效列名")
            return

        # 获取所有表格数据
        all_rows = self.all_table_data
        if not all_rows:
            print("错误：表格数据为空")
            return

        # 获取有效列名（c1, c2...）对应的实际列索引
        try:
            # 解析列名（假设列名格式为c1, c2等）
            col_idx1 = int(column_name_1[1:]) - 1  # 例如 c1 -> 索引0
            col_idx2 = int(column_name_2[1:]) - 1
        except (IndexError, ValueError):
            print("错误：列名格式应为c1, c2等")
            return

        # 检查列索引是否合法
        max_col = len(all_rows[0]) - 1
        if col_idx1 < 0 or col_idx1 > max_col or col_idx2 < 0 or col_idx2 > max_col:
            print("错误：列索引超出范围")
            return

        # 提取数据并转换为浮点数
        data_sample1 = []
        data_sample2 = []

        for row_idx, row in enumerate(all_rows):
            # 跳过空行
            if not row:
                continue

            # 处理第一列数据
            val1 = row[col_idx1] if col_idx1 < len(row) else None
            try:
                if val1 is not None and val1.strip():
                    data_sample1.append(float(val1))
            except ValueError:
                if row_idx == 0:  # 假设第一行可能是标题，允许跳过
                    print(f"警告：跳过第一行标题（列{column_name_1}）")
                else:
                    print(f"警告：第{row_idx + 1}行，列{column_name_1}无效数据: {val1}")

            # 处理第二列数据
            val2 = row[col_idx2] if col_idx2 < len(row) else None
            try:
                if val2 is not None and val2.strip():
                    data_sample2.append(float(val2))
            except ValueError:
                if row_idx == 0:
                    print(f"警告：跳过第一行标题（列{column_name_2}）")
                else:
                    print(f"警告：第{row_idx + 1}行，列{column_name_2}无效数据: {val2}")

        # 数据有效性检查
        if len(data_sample1) < 2 or len(data_sample2) < 2:
            print("错误：单样本有效数据不足（至少需要2个有效值）")
            print(f"样本1数量: {len(data_sample1)}, 样本2数量: {len(data_sample2)}")
            return

        # 存储数据供后续使用
        self.data_sample1 = data_sample1
        self.data_sample2 = data_sample2

        print(f"样本1数据（前10项）: {data_sample1[:10]} (总数: {len(data_sample1)})")
        print(f"样本2数据（前10项）: {data_sample2[:10]} (总数: {len(data_sample2)})")
        print("【handle_radio2_click】执行结束\n")

    # 方法 3：对应 radioButton_3 点击
    def handle_radio3_click(self):
        """汇总数据"""
        if self.radioButton_3.isChecked():
            # 执行 radioButton_3 对应的逻辑
            print("RadioButton 3 被选中")
            # 这里添加具体功能代码

    # 方法 4：确定按钮点击时调用
    def on_confirm_button_click(self):
        # 检查当前选中的 RadioButton 并调用对应方法
        if self.radioButton.isChecked():
            self.handle_radio1_click()
        elif self.radioButton_2.isChecked():
            self.handle_radio2_click()
        elif self.radioButton_3.isChecked():
            self.handle_radio3_click()
        else:
            # 处理未选中情况（可选）
            print("未选择任何 RadioButton")
