# Form implementation generated from reading ui file 'untitled5.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import numpy as np
from scipy import stats
from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMainWindow

#---------------------------
#------单样本界面--------------
class Ui_MainWindow(QMainWindow):
    ###ui控件
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(413, 423)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.listView_11 = QtWidgets.QListView(parent=self.centralwidget)
        self.listView_11.setGeometry(QtCore.QRect(10, 10, 121, 271))
        self.listView_11.setObjectName("listView_11")
        self.radioButton = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.radioButton.setGeometry(QtCore.QRect(160, 10, 131, 16))
        self.radioButton.setObjectName("radioButton")
        self.textEdit = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(180, 30, 161, 41))
        self.textEdit.setObjectName("textEdit")
        self.radioButton_2 = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.radioButton_2.setGeometry(QtCore.QRect(160, 80, 131, 16))
        self.radioButton_2.setObjectName("radioButton_2")
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(180, 100, 81, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(180, 120, 71, 16))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(160, 170, 81, 16))
        self.label_4.setObjectName("label_4")
        self.textEdit_3 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_3.setGeometry(QtCore.QRect(270, 120, 101, 21))
        self.textEdit_3.setObjectName("textEdit_3")
        self.textEdit_4 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_4.setGeometry(QtCore.QRect(270, 100, 101, 21))
        self.textEdit_4.setObjectName("textEdit_4")
        self.textEdit_5 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_5.setGeometry(QtCore.QRect(270, 170, 101, 21))
        self.textEdit_5.setObjectName("textEdit_5")
        self.checkBox = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(160, 210, 141, 16))
        self.checkBox.setObjectName("checkBox")
        self.label_5 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(180, 230, 101, 16))
        self.label_5.setObjectName("label_5")
        self.textEdit_6 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_6.setGeometry(QtCore.QRect(270, 230, 101, 21))
        self.textEdit_6.setObjectName("textEdit_6")
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(70, 300, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(230, 270, 81, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_5 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(230, 300, 81, 23))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(20, 340, 75, 23))
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_3 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(320, 270, 81, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(320, 300, 81, 23))
        self.pushButton_4.setObjectName("pushButton_4")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 413, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.pushButton.clicked.connect(self.show_selected_column_names)
        # 连接确定按钮的点击信号到获取数据的方法
        self.pushButton_5.clicked.connect(self.perform_single_sample_test)
    ###控件的别名
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.radioButton.setText(_translate("MainWindow", "样本所在列(C)"))
        self.radioButton_2.setText(_translate("MainWindow", "汇总数据（Z）"))
        self.label_2.setText(_translate("MainWindow", "样本数量（A）："))
        self.label_3.setText(_translate("MainWindow", "均值（M）："))
        self.label_4.setText(_translate("MainWindow", "标准差（S）："))
        self.checkBox.setText(_translate("MainWindow", "进行假设检验（T）"))
        self.label_5.setText(_translate("MainWindow", "假设均值（H）："))
        self.pushButton.setText(_translate("MainWindow", "选择"))
        self.pushButton_2.setText(_translate("MainWindow", "图形（R）..."))
        self.pushButton_5.setText(_translate("MainWindow", "确定（O）"))
        self.pushButton_6.setText(_translate("MainWindow", "帮助"))
        self.pushButton_3.setText(_translate("MainWindow", "选项（P）..."))
        self.pushButton_4.setText(_translate("MainWindow", "取消"))
    ##构造器，在打开该py文件时就可以获取到主界面的表格数据，并保存到self.all_table_data中
    def __init__(self, main_window):
        super().__init__()
        # 保存主窗口对象
        self.main_window = main_window
        self.all_table_data = []  # 用于存储所有表格数据
        self.setupUi(self)
        self.get_table_data()



     #获取主窗口调用的数据-------------------------------------
    def get_table_data(self):
        table = self.main_window.tableWidget
        rows = table.rowCount()
        columns = table.columnCount()
        print(f"表格行数: {rows}, 列数: {columns}")  # 添加调试信息

        data = []
        for row in range(rows):
            row_data = []
            for col in range(columns):
                item = table.item(row, col)
                if item is not None:
                    row_data.append(item.text())
                else:
                    row_data.append(None)
            data.append(row_data)
        print("获取到的主窗口表格数据:", data)

        # 筛选出有数据的列
        valid_columns = []
        for col in range(columns):
            has_data = False
            for row in range(rows):
                if data[row][col] is not None and data[row][col].strip():
                    has_data = True
                    break
            if has_data:
                valid_columns.append(col)

        # 生成列名
        column_names = [f"c{i + 1}" for i in valid_columns]

        # 创建模型并设置数据
        model = QtGui.QStandardItemModel()
        for name in column_names:
            item = QtGui.QStandardItem(name)
            model.appendRow(item)

        # 将模型设置给 listView_11
        self.listView_11.setModel(model)
        self.all_table_data = data  # 保存所有表格数据
    #获取选中的列名，将其显示到textEdit中
    def show_selected_column_names(self):
        selected_indexes = self.listView_11.selectedIndexes()
        selected_names = [self.listView_11.model().itemFromIndex(index).text() for index in selected_indexes]
        names_text = ", ".join(selected_names)
        self.textEdit.setPlainText(names_text)
    #获取选中的列名下的数据，对数据进行单样本t检验，最后将分析后的数据传回主界面中
    def perform_single_sample_test(self):
        # 从 textEdit 中获取选中的列名
        column_names_text = self.textEdit.toPlainText()
        column_names = [name.strip() for name in column_names_text.split(',') if name.strip()]

        rows = len(self.all_table_data)
        if rows == 0:
            print("表格数据为空，无法进行统计计算。")
            return
        columns = len(self.all_table_data[0])

        print(f"当前表格有 {rows} 行, {columns} 列。")
        for column_name in column_names:
            try:
                # 检查列名格式
                if not column_name.startswith('c') or not column_name[1:].isdigit():
                    print(f"无效的列名: {column_name}，列名应形如 'c1', 'c2' 等。")
                    continue
                col_index = int(column_name[1:]) - 1
                # 检查列索引是否越界
                if col_index < 0 or col_index >= columns:
                    print(f"列索引越界: {column_name}，当前计算用列索引为 {col_index}，表格共有 {columns} 列。")
                    continue

                column_data = []
                for row in range(rows):
                    cell_value = self.all_table_data[row][col_index]
                    if cell_value is not None and cell_value.strip():
                        try:
                            column_data.append(float(cell_value))
                        except ValueError:
                            print(f"列 {column_name} 第 {row + 1} 行数据 '{cell_value}' 无法转换为浮点数。")

                if not column_data:
                    print(f"列 {column_name} 没有有效的数值数据。")
                    continue

                # 计算总数、平均值和标准差
                count = len(column_data)
                mean = np.mean(column_data)
                std_dev = np.std(column_data, ddof=1)

                result_text = f"列 {column_name} 的统计结果：总数: {count}，平均值: {mean}，标准差: {std_dev}"
                self.main_window.display_text(result_text)

                # 检查是否进行假设检验，加入条件判断，如果点击了假设检验的复选框，则再进行假设均值的检验
                if self.checkBox.isChecked():
                    # 获取假设均值
                    try:
                        hypothesized_mean = float(self.textEdit_6.toPlainText())
                    except ValueError:
                        print("假设均值输入无效，请输入一个有效的数字。")
                        return

                    # 计算 t 值和 p 值
                    t_statistic, p_value = stats.ttest_1samp(column_data, hypothesized_mean)
                    self.main_window.display_text(f"假设均值: {hypothesized_mean}")
                    self.main_window.display_text(f"t 值: {t_statistic}")
                    self.main_window.display_text(f"p 值: {p_value}")

                    # 判断是否拒绝原假设（假设显著性水平为 0.05）
                    if p_value < 0.05:
                        self.main_window.display_text("拒绝原假设，样本均值与假设均值有显著差异。")
                    else:
                        self.main_window.display_text("无法拒绝原假设，样本均值与假设均值无显著差异。")

            except Exception as e:
                print(f"处理列 {column_name} 时发生未知错误: {e}")