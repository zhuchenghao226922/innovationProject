# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets

from PyQt6.QtWidgets import QPushButton, QLineEdit
import openpyxl
import xlrd
import os
from PyQt6.QtWidgets import QApplication, QMainWindow, QTableWidget, QTableWidgetItem, QMenu
from PyQt6.QtGui import QKeySequence

#---------------------------------------
#----------------主界面------------------

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):

        ###UI界面
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 700)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("C:/我的/QQ/QQ图片20240726140138.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)
        # 创建的垂直分割线
        self.splitter = QtWidgets.QSplitter(QtCore.Qt.Orientation.Vertical, self.centralwidget)
        self.splitter.setObjectName("splitter")
        # 数据输出框
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setObjectName("textBrowser")
        self.textBrowser.setStyleSheet("border: 1px solid lightblue; text-align: left;")
        self.splitter.addWidget(self.textBrowser)
        # 单元格

        self.tableContainer = QtWidgets.QWidget()
        self.tableLayout = QtWidgets.QVBoxLayout(self.tableContainer)
        self.tableLayout.setContentsMargins(0, 0, 0, 0)
        # 初始化表格
        self.tableWidget = QTableWidget()
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(10)
        self.tableWidget.setRowCount(15)
        # 设置初始列名
        self.update_column_headers(10)  # 生成C1-C10

        # 初始化所有单元格为空
        for row in range(15):
            for col in range(10):
                self.tableWidget.setItem(row, col, QtWidgets.QTableWidgetItem(""))

        self.tableWidget.setSizePolicy(
            QtWidgets.QSizePolicy.Policy.Expanding,
            QtWidgets.QSizePolicy.Policy.Expanding
        )

        # 添加表格到容器
        self.tableLayout.addWidget(self.tableWidget)
        self.splitter.addWidget(self.tableContainer)

        # 设置分割器为centralwidget的布局
        layout = QtWidgets.QVBoxLayout(self.centralwidget)
        layout.addWidget(self.splitter)
        self.splitter.setSizes([200, 500])  # 初始分割比例
        self.tableWidget.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.CustomContextMenu)
        self.tableWidget.customContextMenuRequested.connect(self.showContextMenu)

        self.tableWidget.setStyleSheet("""
                    QTableWidget {
                        gridline-color: #ddd;
                        font: 10pt "Segoe UI";
                    }
                    QHeaderView::section {
                        background-color: #f0f0f0;
                        padding: 4px;
                        border: 1px solid #ddd;
                    }
                """)

        # 创建右键菜单
        self.contextMenu = QtWidgets.QMenu(self.tableWidget)
        self.copyAction = self.contextMenu.addAction("复制")
        self.pasteAction = self.contextMenu.addAction("粘贴")
        self.deleteAction = self.contextMenu.addAction("删除")
        self.copyAction.triggered.connect(self.copyTableData)
        self.pasteAction.triggered.connect(self.pasteTableData)
        self.deleteAction.triggered.connect(self.deleteSelectedCells)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.menuBar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 679, 22))
        self.menuBar.setObjectName("menuBar")
        self.menu = QtWidgets.QMenu(parent=self.menuBar)
        self.menu.setObjectName("menu")
        self.menu_F = QtWidgets.QMenu(parent=self.menu)
        self.menu_F.setObjectName("menu_F")
        self.menu_2 = QtWidgets.QMenu(parent=self.menuBar)
        self.menu_2.setObjectName("menu_2")
        self.menu_K = QtWidgets.QMenu(parent=self.menu_2)
        self.menu_K.setObjectName("menu_K")
        self.menu_3 = QtWidgets.QMenu(parent=self.menuBar)
        self.menu_3.setObjectName("menu_3")
        self.menu_C = QtWidgets.QMenu(parent=self.menu_3)
        self.menu_C.setObjectName("menu_C")
        self.menu_T = QtWidgets.QMenu(parent=self.menu_3)
        self.menu_T.setObjectName("menu_T")
        self.menu_O = QtWidgets.QMenu(parent=self.menu_3)
        self.menu_O.setObjectName("menu_O")
        self.menu_H = QtWidgets.QMenu(parent=self.menu_3)
        self.menu_H.setObjectName("menu_H")
        self.menu_X = QtWidgets.QMenu(parent=self.menu_3)
        self.menu_X.setObjectName("menu_X")
        self.menu_4 = QtWidgets.QMenu(parent=self.menuBar)
        self.menu_4.setObjectName("menu_4")
        self.menu_P = QtWidgets.QMenu(parent=self.menu_4)
        self.menu_P.setObjectName("menu_P")
        self.menu_R = QtWidgets.QMenu(parent=self.menu_4)
        self.menu_R.setObjectName("menu_R")
        self.menu_D = QtWidgets.QMenu(parent=self.menu_4)
        self.menu_D.setObjectName("menu_D")
        self.menu_M = QtWidgets.QMenu(parent=self.menu_4)
        self.menu_M.setObjectName("menu_M")
        self.menu_5 = QtWidgets.QMenu(parent=self.menuBar)
        self.menu_5.setObjectName("menu_5")
        self.menu_B = QtWidgets.QMenu(parent=self.menu_5)
        self.menu_B.setObjectName("menu_B")
        self.menu_A = QtWidgets.QMenu(parent=self.menu_5)
        self.menu_A.setObjectName("menu_A")
        self.menu_M_2 = QtWidgets.QMenu(parent=self.menu_5)
        self.menu_M_2.setObjectName("menu_M_2")
        self.menu_Q = QtWidgets.QMenu(parent=self.menu_5)
        self.menu_Q.setObjectName("menu_Q")
        self.menu_A_2 = QtWidgets.QMenu(parent=self.menu_Q)
        self.menu_A_2.setObjectName("menu_A_2")
        self.menu_G = QtWidgets.QMenu(parent=self.menu_Q)
        self.menu_G.setObjectName("menu_G")
        self.menu_6 = QtWidgets.QMenu(parent=self.menuBar)
        self.menu_6.setObjectName("menu_6")
        self.menu_7 = QtWidgets.QMenu(parent=self.menuBar)
        self.menu_7.setObjectName("menu_7")
        self.menu_8 = QtWidgets.QMenu(parent=self.menuBar)
        self.menu_8.setObjectName("menu_8")
        self.menu_9 = QtWidgets.QMenu(parent=self.menuBar)
        self.menu_9.setObjectName("menu_9")
        self.menu_10 = QtWidgets.QMenu(parent=self.menuBar)
        self.menu_10.setObjectName("menu_10")
        MainWindow.setMenuBar(self.menuBar)
        self.toolBar = QtWidgets.QToolBar(parent=MainWindow)
        self.toolBar.setContextMenuPolicy(QtCore.Qt.ContextMenuPolicy.NoContextMenu)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.ToolBarArea.TopToolBarArea, self.toolBar)
        self.toolBar_2 = QtWidgets.QToolBar(parent=MainWindow)
        self.toolBar_2.setObjectName("toolBar_2")
        MainWindow.addToolBar(QtCore.Qt.ToolBarArea.TopToolBarArea, self.toolBar_2)
        MainWindow.insertToolBarBreak(self.toolBar_2)
        self.toolBar_3 = QtWidgets.QToolBar(parent=MainWindow)
        self.toolBar_3.setObjectName("toolBar_3")
        MainWindow.addToolBar(QtCore.Qt.ToolBarArea.TopToolBarArea, self.toolBar_3)
        MainWindow.insertToolBarBreak(self.toolBar_3)
        self.toolBar_4 = QtWidgets.QToolBar(parent=MainWindow)
        self.toolBar_4.setObjectName("toolBar_4")
        MainWindow.addToolBar(QtCore.Qt.ToolBarArea.TopToolBarArea, self.toolBar_4)
        self.action_N = QtGui.QAction(parent=MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../../../pycharm11/所需图片/新建图标.png"), QtGui.QIcon.Mode.Normal,
                        QtGui.QIcon.State.Off)
        self.action_N.setIcon(icon1)
        self.action_N.setObjectName("action_N")
        self.action_O = QtGui.QAction(parent=MainWindow)
        self.action_O.setObjectName("action_O")
        self.action_O_2 = QtGui.QAction(parent=MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("images/open.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_O_2.setIcon(icon2)
        self.action_O_2.setObjectName("action_O_2")
        self.action_S = QtGui.QAction(parent=MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("images/保存.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_S.setIcon(icon3)
        self.action_S.setObjectName("action_S")
        self.action_A = QtGui.QAction(parent=MainWindow)
        self.action_A.setObjectName("action_A")
        self.action_R = QtGui.QAction(parent=MainWindow)
        self.action_R.setObjectName("action_R")
        self.action_W = QtGui.QAction(parent=MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("images/打开工作表.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_W.setIcon(icon4)
        self.action_W.setObjectName("action_W")
        self.action_C = QtGui.QAction(parent=MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("images/保存当前工作表.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_C.setIcon(icon5)
        self.action_C.setObjectName("action_C")
        self.action_E = QtGui.QAction(parent=MainWindow)
        self.action_E.setObjectName("action_E")
        self.action_D = QtGui.QAction(parent=MainWindow)
        self.action_D.setObjectName("action_D")
        self.action_L = QtGui.QAction(parent=MainWindow)
        self.action_L.setObjectName("action_L")
        self.action_ODbc_Q = QtGui.QAction(parent=MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap("images/ODBC.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_ODbc_Q.setIcon(icon6)
        self.action_ODbc_Q.setObjectName("action_ODbc_Q")
        self.action_G = QtGui.QAction(parent=MainWindow)
        self.action_G.setObjectName("action_G")
        self.action_V = QtGui.QAction(parent=MainWindow)
        self.action_V.setObjectName("action_V")
        self.action_P = QtGui.QAction(parent=MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap("images/打印会话窗口.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_P.setIcon(icon7)
        self.action_P.setObjectName("action_P")
        self.action_5 = QtGui.QAction(parent=MainWindow)
        self.action_5.setObjectName("action_5")
        self.action_X = QtGui.QAction(parent=MainWindow)
        self.action_X.setObjectName("action_X")
        self.action_I = QtGui.QAction(parent=MainWindow)
        self.action_I.setObjectName("action_I")
        self.action_E_2 = QtGui.QAction(parent=MainWindow)
        self.action_E_2.setObjectName("action_E_2")
        self.action_R_2 = QtGui.QAction(parent=MainWindow)
        self.action_R_2.setObjectName("action_R_2")
        self.action_U = QtGui.QAction(parent=MainWindow)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap("images/无法撤销.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_U.setIcon(icon8)
        self.action_U.setObjectName("action_U")
        self.action_U_2 = QtGui.QAction(parent=MainWindow)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap("images/无法重做.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_U_2.setIcon(icon9)
        self.action_U_2.setObjectName("action_U_2")
        self.action_E_3 = QtGui.QAction(parent=MainWindow)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap("images/清除.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_E_3.setIcon(icon10)
        self.action_E_3.setObjectName("action_E_3")
        self.action_D_2 = QtGui.QAction(parent=MainWindow)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap("images/删除.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_D_2.setIcon(icon11)
        self.action_D_2.setObjectName("action_D_2")
        self.action_Q = QtGui.QAction(parent=MainWindow)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap("images/复制.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_Q.setIcon(icon12)
        self.action_Q.setObjectName("action_Q")
        self.action_T = QtGui.QAction(parent=MainWindow)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap("images/2.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_T.setIcon(icon13)
        self.action_T.setObjectName("action_T")
        self.action_P_2 = QtGui.QAction(parent=MainWindow)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap("images/粘贴.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_P_2.setIcon(icon14)
        self.action_P_2.setObjectName("action_P_2")
        self.action_L_2 = QtGui.QAction(parent=MainWindow)
        self.action_L_2.setObjectName("action_L_2")
        self.action_A_2 = QtGui.QAction(parent=MainWindow)
        self.action_A_2.setObjectName("action_A_2")
        self.action_I_2 = QtGui.QAction(parent=MainWindow)
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap("images/编辑最后的对话框.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_I_2.setIcon(icon15)
        self.action_I_2.setObjectName("action_I_2")
        self.action_M = QtGui.QAction(parent=MainWindow)
        self.action_M.setObjectName("action_M")
        self.action_M_2 = QtGui.QAction(parent=MainWindow)
        self.action_M_2.setObjectName("action_M_2")
        self.action_G_2 = QtGui.QAction(parent=MainWindow)
        self.action_G_2.setObjectName("action_G_2")
        self.action_E_4 = QtGui.QAction(parent=MainWindow)
        self.action_E_4.setObjectName("action_E_4")
        self.action_B = QtGui.QAction(parent=MainWindow)
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap("images/子集化工作表.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_B.setIcon(icon16)
        self.action_B.setObjectName("action_B")
        self.action_P_3 = QtGui.QAction(parent=MainWindow)
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap("images/拆分工作表.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_P_3.setIcon(icon17)
        self.action_P_3.setObjectName("action_P_3")
        self.action_M_3 = QtGui.QAction(parent=MainWindow)
        icon18 = QtGui.QIcon()
        icon18.addPixmap(QtGui.QPixmap("images/合并工作表.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_M_3.setIcon(icon18)
        self.action_M_3.setObjectName("action_M_3")
        self.action_U_3 = QtGui.QAction(parent=MainWindow)
        icon19 = QtGui.QIcon()
        icon19.addPixmap(QtGui.QPixmap("images/拆分列.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_U_3.setIcon(icon19)
        self.action_U_3.setObjectName("action_U_3")
        self.action_A_3 = QtGui.QAction(parent=MainWindow)
        icon20 = QtGui.QIcon()
        icon20.addPixmap(QtGui.QPixmap("images/转置列.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_A_3.setIcon(icon20)
        self.action_A_3.setObjectName("action_A_3")
        self.action_S_2 = QtGui.QAction(parent=MainWindow)
        icon21 = QtGui.QIcon()
        icon21.addPixmap(QtGui.QPixmap("images/排序.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_S_2.setIcon(icon21)
        self.action_S_2.setObjectName("action_S_2")
        self.action_R_3 = QtGui.QAction(parent=MainWindow)
        icon22 = QtGui.QIcon()
        icon22.addPixmap(QtGui.QPixmap("images/排秩.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_R_3.setIcon(icon22)
        self.action_R_3.setObjectName("action_R_3")
        self.action_D_3 = QtGui.QAction(parent=MainWindow)
        icon23 = QtGui.QIcon()
        icon23.addPixmap(QtGui.QPixmap("images/删除行.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_D_3.setIcon(icon23)
        self.action_D_3.setObjectName("action_D_3")
        self.action_E_5 = QtGui.QAction(parent=MainWindow)
        icon24 = QtGui.QIcon()
        icon24.addPixmap(QtGui.QPixmap("images/删除变量.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_E_5.setIcon(icon24)
        self.action_E_5.setObjectName("action_E_5")
        self.action_N_2 = QtGui.QAction(parent=MainWindow)
        icon25 = QtGui.QIcon()
        icon25.addPixmap(QtGui.QPixmap("images/合并.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_N_2.setIcon(icon25)
        self.action_N_2.setObjectName("action_N_2")
        self.action_I_3 = QtGui.QAction(parent=MainWindow)
        icon26 = QtGui.QIcon()
        icon26.addPixmap(QtGui.QPixmap("images/显示数据.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_I_3.setIcon(icon26)
        self.action_I_3.setObjectName("action_I_3")
        self.action_2 = QtGui.QAction(parent=MainWindow)
        icon27 = QtGui.QIcon()
        icon27.addPixmap(QtGui.QPixmap("images/新建.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_2.setIcon(icon27)
        self.action_2.setObjectName("action_2")
        self.action = QtGui.QAction(parent=MainWindow)
        self.action.setIcon(icon3)
        self.action.setObjectName("action")
        self.action1 = QtGui.QAction(parent=MainWindow)
        icon28 = QtGui.QIcon()
        icon28.addPixmap(QtGui.QPixmap("images/1.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action1.setIcon(icon28)
        self.action1.setObjectName("action1")
        self.action_L_3 = QtGui.QAction(parent=MainWindow)
        self.action_L_3.setObjectName("action_L_3")
        self.action_3 = QtGui.QAction(parent=MainWindow)
        self.action_3.setObjectName("action_3")
        self.action_C_3 = QtGui.QAction(parent=MainWindow)
        self.action_C_3.setObjectName("action_C_3")
        self.action_S_3 = QtGui.QAction(parent=MainWindow)
        self.action_S_3.setObjectName("action_S_3")
        self.action_S_4 = QtGui.QAction(parent=MainWindow)
        self.action_S_4.setObjectName("action_S_4")
        self.action_A_4 = QtGui.QAction(parent=MainWindow)
        self.action_A_4.setObjectName("action_A_4")
        self.action2 = QtGui.QAction(parent=MainWindow)
        self.action2.setIcon(icon13)
        self.action2.setObjectName("action2")
        self.action_4 = QtGui.QAction(parent=MainWindow)
        self.action_4.setIcon(icon12)
        self.action_4.setObjectName("action_4")
        self.action_6 = QtGui.QAction(parent=MainWindow)
        self.action_6.setIcon(icon14)
        self.action_6.setObjectName("action_6")
        self.action_7 = QtGui.QAction(parent=MainWindow)
        self.action_7.setIcon(icon8)
        self.action_7.setObjectName("action_7")
        self.action_8 = QtGui.QAction(parent=MainWindow)
        icon29 = QtGui.QIcon()
        icon29.addPixmap(QtGui.QPixmap("images/上一个命令.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_8.setIcon(icon29)
        self.action_8.setObjectName("action_8")
        self.action_9 = QtGui.QAction(parent=MainWindow)
        icon30 = QtGui.QIcon()
        icon30.addPixmap(QtGui.QPixmap("images/下一个命令.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_9.setIcon(icon30)
        self.action_9.setObjectName("action_9")
        self.action_10 = QtGui.QAction(parent=MainWindow)
        icon31 = QtGui.QIcon()
        icon31.addPixmap(QtGui.QPixmap("images/在窗口中查找.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_10.setIcon(icon31)
        self.action_10.setObjectName("action_10")
        self.action_11 = QtGui.QAction(parent=MainWindow)
        icon32 = QtGui.QIcon()
        icon32.addPixmap(QtGui.QPixmap("images/查找搜索下一个命令.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_11.setIcon(icon32)
        self.action_11.setObjectName("action_11")
        self.action_12 = QtGui.QAction(parent=MainWindow)
        icon33 = QtGui.QIcon()
        icon33.addPixmap(QtGui.QPixmap("images/通过命令中断.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_12.setIcon(icon33)
        self.action_12.setObjectName("action_12")
        self.action_13 = QtGui.QAction(parent=MainWindow)
        icon34 = QtGui.QIcon()
        icon34.addPixmap(QtGui.QPixmap("images/帮助.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_13.setIcon(icon34)
        self.action_13.setObjectName("action_13")
        self.action_StatGuide = QtGui.QAction(parent=MainWindow)
        icon35 = QtGui.QIcon()
        icon35.addPixmap(QtGui.QPixmap("images/打开StatGuide.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_StatGuide.setIcon(icon35)
        self.action_StatGuide.setObjectName("action_StatGuide")
        self.actionfx = QtGui.QAction(parent=MainWindow)
        icon36 = QtGui.QIcon()
        icon36.addPixmap(QtGui.QPixmap("images/fx.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionfx.setIcon(icon36)
        self.actionfx.setObjectName("actionfx")
        self.action_14 = QtGui.QAction(parent=MainWindow)
        icon37 = QtGui.QIcon()
        icon37.addPixmap(QtGui.QPixmap("images/插入单元格.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_14.setIcon(icon37)
        self.action_14.setObjectName("action_14")
        self.action_15 = QtGui.QAction(parent=MainWindow)
        icon38 = QtGui.QIcon()
        icon38.addPixmap(QtGui.QPixmap("images/插入行.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_15.setIcon(icon38)
        self.action_15.setObjectName("action_15")
        self.action_16 = QtGui.QAction(parent=MainWindow)
        icon39 = QtGui.QIcon()
        icon39.addPixmap(QtGui.QPixmap("images/插入列.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_16.setIcon(icon39)
        self.action_16.setObjectName("action_16")
        self.action_17 = QtGui.QAction(parent=MainWindow)
        icon40 = QtGui.QIcon()
        icon40.addPixmap(QtGui.QPixmap("images/移动列.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_17.setIcon(icon40)
        self.action_17.setObjectName("action_17")
        self.action_18 = QtGui.QAction(parent=MainWindow)
        icon41 = QtGui.QIcon()
        icon41.addPixmap(QtGui.QPixmap("images/上一被刷行.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_18.setIcon(icon41)
        self.action_18.setObjectName("action_18")
        self.action_19 = QtGui.QAction(parent=MainWindow)
        icon42 = QtGui.QIcon()
        icon42.addPixmap(QtGui.QPixmap("images/下一被刷行.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_19.setIcon(icon42)
        self.action_19.setObjectName("action_19")
        self.action_E_6 = QtGui.QAction(parent=MainWindow)
        self.action_E_6.setIcon(icon10)
        self.action_E_6.setObjectName("action_E_6")
        self.action_20 = QtGui.QAction(parent=MainWindow)
        icon43 = QtGui.QIcon()
        icon43.addPixmap(QtGui.QPixmap("images/选择模式.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_20.setIcon(icon43)
        self.action_20.setObjectName("action_20")
        self.action_21 = QtGui.QAction(parent=MainWindow)
        icon44 = QtGui.QIcon()
        icon44.addPixmap(QtGui.QPixmap("images/文本.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_21.setIcon(icon44)
        self.action_21.setObjectName("action_21")
        self.action_22 = QtGui.QAction(parent=MainWindow)
        icon45 = QtGui.QIcon()
        icon45.addPixmap(QtGui.QPixmap("images/矩形.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_22.setIcon(icon45)
        self.action_22.setObjectName("action_22")
        self.action_23 = QtGui.QAction(parent=MainWindow)
        icon46 = QtGui.QIcon()
        icon46.addPixmap(QtGui.QPixmap("images/椭圆.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_23.setIcon(icon46)
        self.action_23.setObjectName("action_23")
        self.action_24 = QtGui.QAction(parent=MainWindow)
        icon47 = QtGui.QIcon()
        icon47.addPixmap(QtGui.QPixmap("images/直线.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_24.setIcon(icon47)
        self.action_24.setObjectName("action_24")
        self.action_25 = QtGui.QAction(parent=MainWindow)
        icon48 = QtGui.QIcon()
        icon48.addPixmap(QtGui.QPixmap("images/标记.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_25.setIcon(icon48)
        self.action_25.setObjectName("action_25")
        self.action_26 = QtGui.QAction(parent=MainWindow)
        icon49 = QtGui.QIcon()
        icon49.addPixmap(QtGui.QPixmap("images/折线.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_26.setIcon(icon49)
        self.action_26.setObjectName("action_26")
        self.action_27 = QtGui.QAction(parent=MainWindow)
        icon50 = QtGui.QIcon()
        icon50.addPixmap(QtGui.QPixmap("images/多边形.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_27.setIcon(icon50)
        self.action_27.setObjectName("action_27")
        self.action_28 = QtGui.QAction(parent=MainWindow)
        icon51 = QtGui.QIcon()
        icon51.addPixmap(QtGui.QPixmap("images/显示会话文件.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_28.setIcon(icon51)
        self.action_28.setObjectName("action_28")
        self.action_29 = QtGui.QAction(parent=MainWindow)
        icon52 = QtGui.QIcon()
        icon52.addPixmap(QtGui.QPixmap("images/显示工作表文件夹.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_29.setIcon(icon52)
        self.action_29.setObjectName("action_29")
        self.action_30 = QtGui.QAction(parent=MainWindow)
        icon53 = QtGui.QIcon()
        icon53.addPixmap(QtGui.QPixmap("images/显示图形文件夹.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_30.setIcon(icon53)
        self.action_30.setObjectName("action_30")
        self.action_31 = QtGui.QAction(parent=MainWindow)
        icon54 = QtGui.QIcon()
        icon54.addPixmap(QtGui.QPixmap("images/显示当前工作表中有关列的信息.png"), QtGui.QIcon.Mode.Normal,
                         QtGui.QIcon.State.Off)
        self.action_31.setIcon(icon54)
        self.action_31.setObjectName("action_31")
        self.action_32 = QtGui.QAction(parent=MainWindow)
        icon55 = QtGui.QIcon()
        icon55.addPixmap(QtGui.QPixmap("images/显示命令历史记录文件夹.png"), QtGui.QIcon.Mode.Normal,
                         QtGui.QIcon.State.Off)
        self.action_32.setIcon(icon55)
        self.action_32.setObjectName("action_32")
        self.action_ReportPad = QtGui.QAction(parent=MainWindow)
        icon56 = QtGui.QIcon()
        icon56.addPixmap(QtGui.QPixmap("images/显示ReportPad.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_ReportPad.setIcon(icon56)
        self.action_ReportPad.setObjectName("action_ReportPad")
        self.action_33 = QtGui.QAction(parent=MainWindow)
        icon57 = QtGui.QIcon()
        icon57.addPixmap(QtGui.QPixmap("images/显示相关文档文件夹.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_33.setIcon(icon57)
        self.action_33.setObjectName("action_33")
        self.action_34 = QtGui.QAction(parent=MainWindow)
        icon58 = QtGui.QIcon()
        icon58.addPixmap(QtGui.QPixmap("images/显示设计.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_34.setIcon(icon58)
        self.action_34.setObjectName("action_34")
        self.actionchans = QtGui.QAction(parent=MainWindow)
        self.actionchans.setObjectName("actionchans")
        self.action_I_4 = QtGui.QAction(parent=MainWindow)
        self.action_I_4.setObjectName("action_I_4")
        self.action_B_2 = QtGui.QAction(parent=MainWindow)
        self.action_B_2.setObjectName("action_B_2")
        self.action_R_5 = QtGui.QAction(parent=MainWindow)
        self.action_R_5.setObjectName("action_R_5")
        self.actionDOE_D = QtGui.QAction(parent=MainWindow)
        self.actionDOE_D.setObjectName("actionDOE_D")
        self.action_C_4 = QtGui.QAction(parent=MainWindow)
        self.action_C_4.setObjectName("action_C_4")
        self.action_L_4 = QtGui.QAction(parent=MainWindow)
        self.action_L_4.setObjectName("action_L_4")
        self.action_S_5 = QtGui.QAction(parent=MainWindow)
        self.action_S_5.setObjectName("action_S_5")
        self.action_T_3 = QtGui.QAction(parent=MainWindow)
        self.action_T_3.setObjectName("action_T_3")
        self.action_N_3 = QtGui.QAction(parent=MainWindow)
        self.action_N_3.setObjectName("action_N_3")
        self.actionEDA_E = QtGui.QAction(parent=MainWindow)
        self.actionEDA_E.setObjectName("actionEDA_E")
        self.action_P_4 = QtGui.QAction(parent=MainWindow)
        self.action_P_4.setObjectName("action_P_4")
        self.action_D_5 = QtGui.QAction(parent=MainWindow)
        self.action_D_5.setObjectName("action_D_5")
        self.action_S_6 = QtGui.QAction(parent=MainWindow)
        self.action_S_6.setObjectName("action_S_6")
        self.action_G_3 = QtGui.QAction(parent=MainWindow)
        self.action_G_3.setObjectName("action_G_3")
        self.action_Z_Z = QtGui.QAction(parent=MainWindow)
        self.action_Z_Z.setObjectName("action_Z_Z")
        self.action_t_1 = QtGui.QAction(parent=MainWindow)
        self.action_t_1.setObjectName("action_t_1")
        self.action_t_2 = QtGui.QAction(parent=MainWindow)
        self.action_t_2.setObjectName("action_t_2")
        self.action_t_P = QtGui.QAction(parent=MainWindow)
        self.action_t_P.setObjectName("action_t_P")
        self.action_R_6 = QtGui.QAction(parent=MainWindow)
        self.action_R_6.setObjectName("action_R_6")
        self.action_O_4 = QtGui.QAction(parent=MainWindow)
        self.action_O_4.setObjectName("action_O_4")
        self.action_Poisson_L = QtGui.QAction(parent=MainWindow)
        self.action_Poisson_L.setObjectName("action_Poisson_L")
        self.action_Poisson_I = QtGui.QAction(parent=MainWindow)
        self.action_Poisson_I.setObjectName("action_Poisson_I")
        self.action_E_7 = QtGui.QAction(parent=MainWindow)
        self.action_E_7.setObjectName("action_E_7")
        self.action_A_6 = QtGui.QAction(parent=MainWindow)
        self.action_A_6.setObjectName("action_A_6")
        self.action_C_5 = QtGui.QAction(parent=MainWindow)
        self.action_C_5.setObjectName("action_C_5")
        self.action_V_2 = QtGui.QAction(parent=MainWindow)
        self.action_V_2.setObjectName("action_V_2")
        self.action_N_4 = QtGui.QAction(parent=MainWindow)
        self.action_N_4.setObjectName("action_N_4")
        self.actionPoisson_F = QtGui.QAction(parent=MainWindow)
        self.actionPoisson_F.setObjectName("actionPoisson_F")
        self.action_C_6 = QtGui.QAction(parent=MainWindow)
        self.action_C_6.setObjectName("action_C_6")
        self.action_N_5 = QtGui.QAction(parent=MainWindow)
        self.action_N_5.setObjectName("action_N_5")
        self.action_M_6 = QtGui.QAction(parent=MainWindow)
        self.action_M_6.setObjectName("action_M_6")
        self.action_S_7 = QtGui.QAction(parent=MainWindow)
        self.action_S_7.setObjectName("action_S_7")
        self.action_O_5 = QtGui.QAction(parent=MainWindow)
        self.action_O_5.setObjectName("action_O_5")
        self.action_T_4 = QtGui.QAction(parent=MainWindow)
        self.action_T_4.setObjectName("action_T_4")
        self.action_U_4 = QtGui.QAction(parent=MainWindow)
        self.action_U_4.setObjectName("action_U_4")
        self.action_W_2 = QtGui.QAction(parent=MainWindow)
        self.action_W_2.setObjectName("action_W_2")
        self.action_C_7 = QtGui.QAction(parent=MainWindow)
        self.action_C_7.setObjectName("action_C_7")
        self.action_B_3 = QtGui.QAction(parent=MainWindow)
        self.action_B_3.setObjectName("action_B_3")
        self.action_R_7 = QtGui.QAction(parent=MainWindow)
        self.action_R_7.setObjectName("action_R_7")
        self.action_N_6 = QtGui.QAction(parent=MainWindow)
        self.action_N_6.setObjectName("action_N_6")
        self.action_U_5 = QtGui.QAction(parent=MainWindow)
        self.action_U_5.setObjectName("action_U_5")
        self.action_M_7 = QtGui.QAction(parent=MainWindow)
        self.action_M_7.setObjectName("action_M_7")
        self.action_X_3 = QtGui.QAction(parent=MainWindow)
        self.action_X_3.setObjectName("action_X_3")
        self.action_E_8 = QtGui.QAction(parent=MainWindow)
        self.action_E_8.setObjectName("action_E_8")
        self.action_I_5 = QtGui.QAction(parent=MainWindow)
        self.action_I_5.setObjectName("action_I_5")
        self.action_D_6 = QtGui.QAction(parent=MainWindow)
        self.action_D_6.setObjectName("action_D_6")
        self.action_A_7 = QtGui.QAction(parent=MainWindow)
        self.action_A_7.setObjectName("action_A_7")
        self.action_T_5 = QtGui.QAction(parent=MainWindow)
        self.action_T_5.setObjectName("action_T_5")
        self.action_S_8 = QtGui.QAction(parent=MainWindow)
        self.action_S_8.setObjectName("action_S_8")
        self.action_N_7 = QtGui.QAction(parent=MainWindow)
        self.action_N_7.setObjectName("action_N_7")
        self.action_T_6 = QtGui.QAction(parent=MainWindow)
        self.action_T_6.setObjectName("action_T_6")
        self.action_D_7 = QtGui.QAction(parent=MainWindow)
        self.action_D_7.setObjectName("action_D_7")
        self.action_A_8 = QtGui.QAction(parent=MainWindow)
        self.action_A_8.setObjectName("action_A_8")
        self.action_U_6 = QtGui.QAction(parent=MainWindow)
        self.action_U_6.setObjectName("action_U_6")
        self.action_E_9 = QtGui.QAction(parent=MainWindow)
        self.action_E_9.setObjectName("action_E_9")
        self.action_N_8 = QtGui.QAction(parent=MainWindow)
        self.action_N_8.setObjectName("action_N_8")
        self.action_T_7 = QtGui.QAction(parent=MainWindow)
        self.action_T_7.setObjectName("action_T_7")
        self.action_I_6 = QtGui.QAction(parent=MainWindow)
        self.action_I_6.setObjectName("action_I_6")
        self.action_R_8 = QtGui.QAction(parent=MainWindow)
        self.action_R_8.setObjectName("action_R_8")
        self.action_C_8 = QtGui.QAction(parent=MainWindow)
        self.action_C_8.setObjectName("action_C_8")
        self.action_Q_3 = QtGui.QAction(parent=MainWindow)
        self.action_Q_3.setObjectName("action_Q_3")
        self.action_N_9 = QtGui.QAction(parent=MainWindow)
        self.action_N_9.setObjectName("action_N_9")
        self.action_43 = QtGui.QAction(parent=MainWindow)
        self.action_43.setObjectName("action_43")
        self.actionF_F = QtGui.QAction(parent=MainWindow)
        self.actionF_F.setObjectName("actionF_F")
        self.actiont_T = QtGui.QAction(parent=MainWindow)
        self.actiont_T.setObjectName("actiont_T")
        self.action_U_7 = QtGui.QAction(parent=MainWindow)
        self.action_U_7.setObjectName("action_U_7")
        self.actionBernoulli = QtGui.QAction(parent=MainWindow)
        self.actionBernoulli.setObjectName("actionBernoulli")
        self.action_B_4 = QtGui.QAction(parent=MainWindow)
        self.action_B_4.setObjectName("action_B_4")
        self.action_44 = QtGui.QAction(parent=MainWindow)
        self.action_44.setObjectName("action_44")
        self.action_45 = QtGui.QAction(parent=MainWindow)
        self.action_45.setObjectName("action_45")
        self.action_H_2 = QtGui.QAction(parent=MainWindow)
        self.action_H_2.setObjectName("action_H_2")
        self.action_D_8 = QtGui.QAction(parent=MainWindow)
        self.action_D_8.setObjectName("action_D_8")
        self.action_I_7 = QtGui.QAction(parent=MainWindow)
        self.action_I_7.setObjectName("action_I_7")
        self.actionPoisson_P = QtGui.QAction(parent=MainWindow)
        self.actionPoisson_P.setObjectName("actionPoisson_P")
        self.actionBeta_A = QtGui.QAction(parent=MainWindow)
        self.actionBeta_A.setObjectName("actionBeta_A")
        self.actionCauchy_Y = QtGui.QAction(parent=MainWindow)
        self.actionCauchy_Y.setObjectName("actionCauchy_Y")
        self.action_X_4 = QtGui.QAction(parent=MainWindow)
        self.action_X_4.setObjectName("action_X_4")
        self.actionGamma_G = QtGui.QAction(parent=MainWindow)
        self.actionGamma_G.setObjectName("actionGamma_G")
        self.actionLaplace_L = QtGui.QAction(parent=MainWindow)
        self.actionLaplace_L.setObjectName("actionLaplace_L")
        self.action_E_10 = QtGui.QAction(parent=MainWindow)
        self.action_E_10.setObjectName("action_E_10")
        self.actionLodistic_O = QtGui.QAction(parent=MainWindow)
        self.actionLodistic_O.setObjectName("actionLodistic_O")
        self.action_Logistic_S = QtGui.QAction(parent=MainWindow)
        self.action_Logistic_S.setObjectName("action_Logistic_S")
        self.action_M_8 = QtGui.QAction(parent=MainWindow)
        self.action_M_8.setObjectName("action_M_8")
        self.action_V_3 = QtGui.QAction(parent=MainWindow)
        self.action_V_3.setObjectName("action_V_3")
        self.action_R_9 = QtGui.QAction(parent=MainWindow)
        self.action_R_9.setObjectName("action_R_9")
        self.actionWeibull_W = QtGui.QAction(parent=MainWindow)
        self.actionWeibull_W.setObjectName("actionWeibull_W")
        self.action_Q_4 = QtGui.QAction(parent=MainWindow)
        self.action_Q_4.setObjectName("action_Q_4")
        self.action_N_10 = QtGui.QAction(parent=MainWindow)
        self.action_N_10.setObjectName("action_N_10")
        self.action_46 = QtGui.QAction(parent=MainWindow)
        self.action_46.setObjectName("action_46")
        self.actionF_F_2 = QtGui.QAction(parent=MainWindow)
        self.actionF_F_2.setObjectName("actionF_F_2")
        self.actiont_T_2 = QtGui.QAction(parent=MainWindow)
        self.actiont_T_2.setObjectName("actiont_T_2")
        self.action_U_8 = QtGui.QAction(parent=MainWindow)
        self.action_U_8.setObjectName("action_U_8")
        self.actionBernoulli_2 = QtGui.QAction(parent=MainWindow)
        self.actionBernoulli_2.setObjectName("actionBernoulli_2")
        self.action_B_5 = QtGui.QAction(parent=MainWindow)
        self.action_B_5.setObjectName("action_B_5")
        self.action_47 = QtGui.QAction(parent=MainWindow)
        self.action_47.setObjectName("action_47")
        self.action_48 = QtGui.QAction(parent=MainWindow)
        self.action_48.setObjectName("action_48")
        self.action_H_3 = QtGui.QAction(parent=MainWindow)
        self.action_H_3.setObjectName("action_H_3")
        self.action_D_9 = QtGui.QAction(parent=MainWindow)
        self.action_D_9.setObjectName("action_D_9")
        self.action_I_8 = QtGui.QAction(parent=MainWindow)
        self.action_I_8.setObjectName("action_I_8")
        self.actionPoisson_P_2 = QtGui.QAction(parent=MainWindow)
        self.actionPoisson_P_2.setObjectName("actionPoisson_P_2")
        self.actionBeta_A_2 = QtGui.QAction(parent=MainWindow)
        self.actionBeta_A_2.setObjectName("actionBeta_A_2")
        self.actionCauchy_Y_2 = QtGui.QAction(parent=MainWindow)
        self.actionCauchy_Y_2.setObjectName("actionCauchy_Y_2")
        self.action_X_5 = QtGui.QAction(parent=MainWindow)
        self.action_X_5.setObjectName("action_X_5")
        self.actionGamma_G_2 = QtGui.QAction(parent=MainWindow)
        self.actionGamma_G_2.setObjectName("actionGamma_G_2")
        self.actionLaplace_L_2 = QtGui.QAction(parent=MainWindow)
        self.actionLaplace_L_2.setObjectName("actionLaplace_L_2")
        self.action_E_11 = QtGui.QAction(parent=MainWindow)
        self.action_E_11.setObjectName("action_E_11")
        self.actionLodistic_O_2 = QtGui.QAction(parent=MainWindow)
        self.actionLodistic_O_2.setObjectName("actionLodistic_O_2")
        self.action_Logistic_S_2 = QtGui.QAction(parent=MainWindow)
        self.action_Logistic_S_2.setObjectName("action_Logistic_S_2")
        self.action_M_9 = QtGui.QAction(parent=MainWindow)
        self.action_M_9.setObjectName("action_M_9")
        self.action_V_4 = QtGui.QAction(parent=MainWindow)
        self.action_V_4.setObjectName("action_V_4")
        self.action_R_10 = QtGui.QAction(parent=MainWindow)
        self.action_R_10.setObjectName("action_R_10")
        self.actionWeibull_W_2 = QtGui.QAction(parent=MainWindow)
        self.actionWeibull_W_2.setObjectName("actionWeibull_W_2")
        self.action_R_11 = QtGui.QAction(parent=MainWindow)
        self.action_R_11.setObjectName("action_R_11")
        self.action_T_8 = QtGui.QAction(parent=MainWindow)
        self.action_T_8.setObjectName("action_T_8")
        self.action_I_9 = QtGui.QAction(parent=MainWindow)
        self.action_I_9.setObjectName("action_I_9")
        self.action_F = QtGui.QAction(parent=MainWindow)
        self.action_F.setObjectName("action_F")
        self.action_D_10 = QtGui.QAction(parent=MainWindow)
        self.action_D_10.setObjectName("action_D_10")
        self.action_E_12 = QtGui.QAction(parent=MainWindow)
        self.action_E_12.setObjectName("action_E_12")
        self.action_A_9 = QtGui.QAction(parent=MainWindow)
        self.action_A_9.setObjectName("action_A_9")
        self.action_54 = QtGui.QAction(parent=MainWindow)
        self.action_54.setObjectName("action_54")
        self.actionStatGuide = QtGui.QAction(parent=MainWindow)
        self.actionStatGuide.setObjectName("actionStatGuide")
        self.action_55 = QtGui.QAction(parent=MainWindow)
        self.action_55.setObjectName("action_55")
        self.action_56 = QtGui.QAction(parent=MainWindow)
        self.action_56.setObjectName("action_56")
        self.action_57 = QtGui.QAction(parent=MainWindow)
        self.action_57.setObjectName("action_57")
        self.action_58 = QtGui.QAction(parent=MainWindow)
        self.action_58.setObjectName("action_58")
        self.action_59 = QtGui.QAction(parent=MainWindow)
        self.action_59.setObjectName("action_59")
        self.action_60 = QtGui.QAction(parent=MainWindow)
        self.action_60.setObjectName("action_60")
        self.action_61 = QtGui.QAction(parent=MainWindow)
        self.action_61.setObjectName("action_61")
        self.action_A_10 = QtGui.QAction(parent=MainWindow)
        self.action_A_10.setObjectName("action_A_10")
        self.action_C_9 = QtGui.QAction(parent=MainWindow)
        self.action_C_9.setObjectName("action_C_9")
        self.action_T_9 = QtGui.QAction(parent=MainWindow)
        self.action_T_9.setObjectName("action_T_9")
        self.action_N_11 = QtGui.QAction(parent=MainWindow)
        self.action_N_11.setObjectName("action_N_11")
        self.action_R_12 = QtGui.QAction(parent=MainWindow)
        self.action_R_12.setObjectName("action_R_12")
        self.action_A_11 = QtGui.QAction(parent=MainWindow)
        self.action_A_11.setObjectName("action_A_11")
        self.action_E_13 = QtGui.QAction(parent=MainWindow)
        self.action_E_13.setObjectName("action_E_13")
        self.action_L_5 = QtGui.QAction(parent=MainWindow)
        self.action_L_5.setObjectName("action_L_5")
        self.action_U_9 = QtGui.QAction(parent=MainWindow)
        self.action_U_9.setObjectName("action_U_9")
        self.action1_2 = QtGui.QAction(parent=MainWindow)
        self.action1_2.setObjectName("action1_2")
        self.action2_Project_Mananger = QtGui.QAction(parent=MainWindow)
        self.action2_Project_Mananger.setObjectName("action2_Project_Mananger")
        self.action3_1 = QtGui.QAction(parent=MainWindow)
        self.action3_1.setObjectName("action3_1")
        self.actionMicrodoft_C = QtGui.QAction(parent=MainWindow)
        self.actionMicrodoft_C.setObjectName("actionMicrodoft_C")
        self.action_N_12 = QtGui.QAction(parent=MainWindow)
        self.action_N_12.setObjectName("action_N_12")
        self.actionWindows_E = QtGui.QAction(parent=MainWindow)
        self.actionWindows_E.setObjectName("actionWindows_E")
        self.action_T_10 = QtGui.QAction(parent=MainWindow)
        self.action_T_10.setObjectName("action_T_10")
        self.action_B_6 = QtGui.QAction(parent=MainWindow)
        self.action_B_6.setObjectName("action_B_6")
        self.action_Z = QtGui.QAction(parent=MainWindow)
        self.action_Z.setObjectName("action_Z")
        self.action_O_6 = QtGui.QAction(parent=MainWindow)
        self.action_O_6.setObjectName("action_O_6")
        self.action_P_5 = QtGui.QAction(parent=MainWindow)
        self.action_P_5.setObjectName("action_P_5")
        self.action_F_2 = QtGui.QAction(parent=MainWindow)
        self.action_F_2.setObjectName("action_F_2")
        self.action_N_13 = QtGui.QAction(parent=MainWindow)
        self.action_N_13.setObjectName("action_N_13")
        self.action_P_6 = QtGui.QAction(parent=MainWindow)
        self.action_P_6.setObjectName("action_P_6")
        self.action_E_14 = QtGui.QAction(parent=MainWindow)
        self.action_E_14.setObjectName("action_E_14")
        self.action_O_7 = QtGui.QAction(parent=MainWindow)
        self.action_O_7.setObjectName("action_O_7")
        self.action_F_3 = QtGui.QAction(parent=MainWindow)
        self.action_F_3.setObjectName("action_F_3")
        self.action_R_13 = QtGui.QAction(parent=MainWindow)
        self.action_R_13.setObjectName("action_R_13")
        self.action_A_12 = QtGui.QAction(parent=MainWindow)
        self.action_A_12.setObjectName("action_A_12")
        self.action_S_9 = QtGui.QAction(parent=MainWindow)
        icon59 = QtGui.QIcon()
        icon59.addPixmap(QtGui.QPixmap("images/散点图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_S_9.setIcon(icon59)
        self.action_S_9.setObjectName("action_S_9")
        self.action_M_10 = QtGui.QAction(parent=MainWindow)
        icon60 = QtGui.QIcon()
        icon60.addPixmap(QtGui.QPixmap("images/矩形图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_M_10.setIcon(icon60)
        self.action_M_10.setObjectName("action_M_10")
        self.action_N_14 = QtGui.QAction(parent=MainWindow)
        icon61 = QtGui.QIcon()
        icon61.addPixmap(QtGui.QPixmap("images/边际图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_N_14.setIcon(icon61)
        self.action_N_14.setObjectName("action_N_14")
        self.action_H_4 = QtGui.QAction(parent=MainWindow)
        icon62 = QtGui.QIcon()
        icon62.addPixmap(QtGui.QPixmap("images/直方图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_H_4.setIcon(icon62)
        self.action_H_4.setObjectName("action_H_4")
        self.action_D_11 = QtGui.QAction(parent=MainWindow)
        icon63 = QtGui.QIcon()
        icon63.addPixmap(QtGui.QPixmap("images/点图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_D_11.setIcon(icon63)
        self.action_D_11.setObjectName("action_D_11")
        self.action_F_4 = QtGui.QAction(parent=MainWindow)
        icon64 = QtGui.QIcon()
        icon64.addPixmap(QtGui.QPixmap("images/茎叶图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_F_4.setIcon(icon64)
        self.action_F_4.setObjectName("action_F_4")
        self.action_Y = QtGui.QAction(parent=MainWindow)
        icon65 = QtGui.QIcon()
        icon65.addPixmap(QtGui.QPixmap("images/概率图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_Y.setIcon(icon65)
        self.action_Y.setObjectName("action_Y")
        self.action_E_15 = QtGui.QAction(parent=MainWindow)
        icon66 = QtGui.QIcon()
        icon66.addPixmap(QtGui.QPixmap("images/经验累积分布函数.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_E_15.setIcon(icon66)
        self.action_E_15.setObjectName("action_E_15")
        self.action_O_8 = QtGui.QAction(parent=MainWindow)
        icon67 = QtGui.QIcon()
        icon67.addPixmap(QtGui.QPixmap("images/概率分布图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_O_8.setIcon(icon67)
        self.action_O_8.setObjectName("action_O_8")
        self.action_B_7 = QtGui.QAction(parent=MainWindow)
        icon68 = QtGui.QIcon()
        icon68.addPixmap(QtGui.QPixmap("images/箱线图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_B_7.setIcon(icon68)
        self.action_B_7.setObjectName("action_B_7")
        self.action_I_10 = QtGui.QAction(parent=MainWindow)
        icon69 = QtGui.QIcon()
        icon69.addPixmap(QtGui.QPixmap("images/区间图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_I_10.setIcon(icon69)
        self.action_I_10.setObjectName("action_I_10")
        self.action_V_5 = QtGui.QAction(parent=MainWindow)
        icon70 = QtGui.QIcon()
        icon70.addPixmap(QtGui.QPixmap("images/单值图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_V_5.setIcon(icon70)
        self.action_V_5.setObjectName("action_V_5")
        self.action_L_6 = QtGui.QAction(parent=MainWindow)
        icon71 = QtGui.QIcon()
        icon71.addPixmap(QtGui.QPixmap("images/线条图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_L_6.setIcon(icon71)
        self.action_L_6.setObjectName("action_L_6")
        self.条形图 = QtGui.QAction(parent=MainWindow)
        icon72 = QtGui.QIcon()
        icon72.addPixmap(QtGui.QPixmap("images/条形图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.条形图.setIcon(icon72)
        self.条形图.setObjectName("条形图")
        self.action_P_7 = QtGui.QAction(parent=MainWindow)
        icon73 = QtGui.QIcon()
        icon73.addPixmap(QtGui.QPixmap("images/饼图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_P_7.setIcon(icon73)
        self.action_P_7.setObjectName("action_P_7")
        self.action_T_11 = QtGui.QAction(parent=MainWindow)
        icon74 = QtGui.QIcon()
        icon74.addPixmap(QtGui.QPixmap("images/时间序列图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_T_11.setIcon(icon74)
        self.action_T_11.setObjectName("action_T_11")
        self.action_A_13 = QtGui.QAction(parent=MainWindow)
        icon75 = QtGui.QIcon()
        icon75.addPixmap(QtGui.QPixmap("images/区域图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_A_13.setIcon(icon75)
        self.action_A_13.setObjectName("action_A_13")
        self.action_C_10 = QtGui.QAction(parent=MainWindow)
        icon76 = QtGui.QIcon()
        icon76.addPixmap(QtGui.QPixmap("images/等值线图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action_C_10.setIcon(icon76)
        self.action_C_10.setObjectName("action_C_10")
        self.action3D_3 = QtGui.QAction(parent=MainWindow)
        icon77 = QtGui.QIcon()
        icon77.addPixmap(QtGui.QPixmap("images/3D 散点图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action3D_3.setIcon(icon77)
        self.action3D_3.setObjectName("action3D_3")
        self.action3D_U = QtGui.QAction(parent=MainWindow)
        icon78 = QtGui.QIcon()
        icon78.addPixmap(QtGui.QPixmap("images/3D 曲面图.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.action3D_U.setIcon(icon78)
        self.action3D_U.setObjectName("action3D_U")
        self.action_O_3 = QtGui.QAction(parent=MainWindow)
        self.action_O_3.setObjectName("action_O_3")
        self.actionKmeans = QtGui.QAction(parent=MainWindow)
        self.actionKmeans.setObjectName("actionKmeans")
        self.action_N_15 = QtGui.QAction(parent=MainWindow)
        self.action_N_15.setObjectName("action_N_15")
        self.action_R_R_G = QtGui.QAction(parent=MainWindow)
        self.action_R_R_G.setObjectName("action_R_R_G")
        self.menu_F.addAction(self.action_I)
        self.menu_F.addAction(self.action_E_2)
        self.menu_F.addSeparator()
        self.menu_F.addAction(self.action_R_2)
        self.menu.addAction(self.action_N)
        self.menu.addSeparator()
        self.menu.addAction(self.action_O_2)
        self.menu.addAction(self.action_S)
        self.menu.addAction(self.action_A)
        self.menu.addAction(self.action_R)
        self.menu.addSeparator()
        self.menu.addAction(self.action_W)
        self.menu.addAction(self.action_C)
        self.menu.addAction(self.action_E)
        self.menu.addAction(self.action_D)
        self.menu.addAction(self.action_L)
        self.menu.addSeparator()
        self.menu.addAction(self.action_ODbc_Q)
        self.menu.addAction(self.action_G)
        self.menu.addAction(self.menu_F.menuAction())
        self.menu.addAction(self.action_V)
        self.menu.addSeparator()
        self.menu.addAction(self.action_P)
        self.menu.addAction(self.action_5)
        self.menu.addSeparator()
        self.menu.addAction(self.action_X)
        self.menu_K.addAction(self.action_M_2)
        self.menu_K.addAction(self.action_G_2)
        self.menu_K.addAction(self.action_E_4)
        self.menu_2.addAction(self.action_U)
        self.menu_2.addAction(self.action_U_2)
        self.menu_2.addSeparator()
        self.menu_2.addAction(self.action_E_3)
        self.menu_2.addAction(self.action_D_2)
        self.menu_2.addAction(self.action_Q)
        self.menu_2.addAction(self.action_T)
        self.menu_2.addAction(self.action_P_2)
        self.menu_2.addSeparator()
        self.menu_2.addAction(self.action_L_2)
        self.menu_2.addAction(self.menu_K.menuAction())
        self.menu_2.addSeparator()
        self.menu_2.addAction(self.action_A_2)
        self.menu_2.addSeparator()
        self.menu_2.addAction(self.action_I_2)
        self.menu_2.addAction(self.action_M)
        self.menu_C.addAction(self.action_C_6)
        self.menu_C.addAction(self.action_N_5)
        self.menu_C.addAction(self.action_M_6)
        self.menu_C.addSeparator()
        self.menu_C.addAction(self.action_S_7)
        self.menu_C.addAction(self.action_O_5)
        self.menu_C.addSeparator()
        self.menu_C.addAction(self.action_T_4)
        self.menu_C.addAction(self.action_U_4)
        self.menu_C.addSeparator()
        self.menu_C.addAction(self.action_W_2)
        self.menu_T.addAction(self.action_C_7)
        self.menu_T.addAction(self.action_B_3)
        self.menu_T.addSeparator()
        self.menu_T.addAction(self.action_R_7)
        self.menu_O.addAction(self.action_N_6)
        self.menu_O.addAction(self.action_U_5)
        self.menu_O.addAction(self.action_M_7)
        self.menu_O.addSeparator()
        self.menu_O.addAction(self.action_X_3)
        self.menu_O.addAction(self.action_E_8)
        self.menu_O.addAction(self.action_I_5)
        self.menu_O.addSeparator()
        self.menu_O.addAction(self.action_D_6)
        self.menu_O.addAction(self.action_A_7)
        self.menu_O.addAction(self.action_T_5)
        self.menu_O.addSeparator()
        self.menu_O.addAction(self.action_S_8)
        self.menu_H.addAction(self.action_N_7)
        self.menu_H.addAction(self.action_T_6)
        self.menu_H.addAction(self.action_D_7)
        self.menu_H.addSeparator()
        self.menu_H.addAction(self.action_A_8)
        self.menu_H.addAction(self.action_U_6)
        self.menu_H.addAction(self.action_E_9)
        self.menu_X.addAction(self.action_N_8)
        self.menu_X.addAction(self.action_T_7)
        self.menu_3.addAction(self.action_B)
        self.menu_3.addAction(self.action_P_3)
        self.menu_3.addAction(self.action_M_3)
        self.menu_3.addSeparator()
        self.menu_3.addAction(self.menu_C.menuAction())
        self.menu_3.addAction(self.action_U_3)
        self.menu_3.addAction(self.menu_T.menuAction())
        self.menu_3.addAction(self.action_A_3)
        self.menu_3.addSeparator()
        self.menu_3.addAction(self.action_S_2)
        self.menu_3.addAction(self.action_R_3)
        self.menu_3.addSeparator()
        self.menu_3.addAction(self.action_D_3)
        self.menu_3.addAction(self.action_E_5)
        self.menu_3.addSeparator()
        self.menu_3.addAction(self.menu_O.menuAction())
        self.menu_3.addAction(self.menu_H.menuAction())
        self.menu_3.addAction(self.menu_X.menuAction())
        self.menu_3.addAction(self.action_N_2)
        self.menu_3.addSeparator()
        self.menu_3.addAction(self.action_I_3)
        self.menu_P.addAction(self.action_S_4)
        self.menu_P.addAction(self.action_A_4)
        self.menu_P.addAction(self.action_I_6)
        self.menu_P.addAction(self.action_R_8)
        self.menu_R.addAction(self.action_C_8)
        self.menu_R.addSeparator()
        self.menu_R.addAction(self.action_Q_3)
        self.menu_R.addAction(self.action_N_9)
        self.menu_R.addAction(self.action_43)
        self.menu_R.addAction(self.actionF_F)
        self.menu_R.addAction(self.actiont_T)
        self.menu_R.addAction(self.action_U_7)
        self.menu_R.addSeparator()
        self.menu_R.addAction(self.actionBernoulli)
        self.menu_R.addAction(self.action_B_4)
        self.menu_R.addAction(self.action_44)
        self.menu_R.addAction(self.action_45)
        self.menu_R.addAction(self.action_H_2)
        self.menu_R.addAction(self.action_D_8)
        self.menu_R.addAction(self.action_I_7)
        self.menu_R.addAction(self.actionPoisson_P)
        self.menu_R.addSeparator()
        self.menu_R.addAction(self.actionBeta_A)
        self.menu_R.addAction(self.actionCauchy_Y)
        self.menu_R.addAction(self.action_X_4)
        self.menu_R.addAction(self.actionGamma_G)
        self.menu_R.addAction(self.actionLaplace_L)
        self.menu_R.addAction(self.action_E_10)
        self.menu_R.addAction(self.actionLodistic_O)
        self.menu_R.addAction(self.action_Logistic_S)
        self.menu_R.addAction(self.action_M_8)
        self.menu_R.addAction(self.action_V_3)
        self.menu_R.addAction(self.action_R_9)
        self.menu_R.addAction(self.actionWeibull_W)
        self.menu_D.addAction(self.action_Q_4)
        self.menu_D.addAction(self.action_N_10)
        self.menu_D.addAction(self.action_46)
        self.menu_D.addAction(self.actionF_F_2)
        self.menu_D.addAction(self.actiont_T_2)
        self.menu_D.addAction(self.action_U_8)
        self.menu_D.addSeparator()
        self.menu_D.addAction(self.actionBernoulli_2)
        self.menu_D.addAction(self.action_B_5)
        self.menu_D.addAction(self.action_47)
        self.menu_D.addAction(self.action_48)
        self.menu_D.addAction(self.action_H_3)
        self.menu_D.addAction(self.action_D_9)
        self.menu_D.addAction(self.action_I_8)
        self.menu_D.addAction(self.actionPoisson_P_2)
        self.menu_D.addSeparator()
        self.menu_D.addAction(self.actionBeta_A_2)
        self.menu_D.addAction(self.actionCauchy_Y_2)
        self.menu_D.addAction(self.action_X_5)
        self.menu_D.addAction(self.actionGamma_G_2)
        self.menu_D.addAction(self.actionLaplace_L_2)
        self.menu_D.addAction(self.action_E_11)
        self.menu_D.addAction(self.actionLodistic_O_2)
        self.menu_D.addAction(self.action_Logistic_S_2)
        self.menu_D.addAction(self.action_M_9)
        self.menu_D.addAction(self.action_V_4)
        self.menu_D.addAction(self.action_R_10)
        self.menu_D.addAction(self.actionWeibull_W_2)
        self.menu_M.addAction(self.action_R_11)
        self.menu_M.addAction(self.action_T_8)
        self.menu_M.addAction(self.action_I_9)
        self.menu_M.addAction(self.action_F)
        self.menu_M.addAction(self.action_D_10)
        self.menu_M.addAction(self.action_E_12)
        self.menu_M.addAction(self.action_A_9)
        self.menu_4.addAction(self.action_L_3)
        self.menu_4.addAction(self.action_3)
        self.menu_4.addAction(self.action_C_3)
        self.menu_4.addAction(self.action_S_3)
        self.menu_4.addSeparator()
        self.menu_4.addAction(self.menu_P.menuAction())
        self.menu_4.addAction(self.actionchans)
        self.menu_4.addAction(self.action_I_4)
        self.menu_4.addSeparator()
        self.menu_4.addAction(self.action_B_2)
        self.menu_4.addAction(self.menu_R.menuAction())
        self.menu_4.addAction(self.menu_D.menuAction())
        self.menu_4.addSeparator()
        self.menu_4.addAction(self.menu_M.menuAction())
        self.menu_B.addAction(self.action_D_5)
        self.menu_B.addAction(self.action_S_6)
        self.menu_B.addAction(self.action_G_3)
        self.menu_B.addSeparator()
        self.menu_B.addAction(self.action_Z_Z)
        self.menu_B.addAction(self.action_t_1)
        self.menu_B.addAction(self.action_t_2)
        self.menu_B.addAction(self.action_t_P)
        self.menu_B.addSeparator()
        self.menu_B.addAction(self.action_R_6)
        self.menu_B.addAction(self.action_O_4)
        self.menu_B.addAction(self.action_Poisson_L)
        self.menu_B.addAction(self.action_Poisson_I)
        self.menu_B.addSeparator()
        self.menu_B.addAction(self.action_E_7)
        self.menu_B.addAction(self.action_A_6)
        self.menu_B.addSeparator()
        self.menu_B.addAction(self.action_C_5)
        self.menu_B.addAction(self.action_V_2)
        self.menu_B.addSeparator()
        self.menu_B.addAction(self.action_N_4)
        self.menu_B.addSeparator()
        self.menu_B.addAction(self.actionPoisson_F)
        self.menu_A.addAction(self.action_O_3)
        self.menu_M_2.addAction(self.actionKmeans)
        self.menu_A_2.addAction(self.action_N_15)
        self.menu_G.addAction(self.action_R_R_G)
        self.menu_Q.addAction(self.menu_A_2.menuAction())
        self.menu_Q.addAction(self.menu_G.menuAction())
        self.menu_5.addAction(self.menu_B.menuAction())
        self.menu_5.addAction(self.action_R_5)
        self.menu_5.addAction(self.menu_A.menuAction())
        self.menu_5.addAction(self.actionDOE_D)
        self.menu_5.addAction(self.action_C_4)
        self.menu_5.addAction(self.menu_Q.menuAction())
        self.menu_5.addAction(self.action_L_4)
        self.menu_5.addAction(self.menu_M_2.menuAction())
        self.menu_5.addAction(self.action_S_5)
        self.menu_5.addAction(self.action_T_3)
        self.menu_5.addAction(self.action_N_3)
        self.menu_5.addAction(self.actionEDA_E)
        self.menu_5.addAction(self.action_P_4)
        self.menu_6.addAction(self.action_S_9)
        self.menu_6.addAction(self.action_M_10)
        self.menu_6.addAction(self.action_N_14)
        self.menu_6.addSeparator()
        self.menu_6.addAction(self.action_H_4)
        self.menu_6.addAction(self.action_D_11)
        self.menu_6.addAction(self.action_F_4)
        self.menu_6.addAction(self.action_Y)
        self.menu_6.addAction(self.action_E_15)
        self.menu_6.addAction(self.action_O_8)
        self.menu_6.addSeparator()
        self.menu_6.addAction(self.action_B_7)
        self.menu_6.addAction(self.action_I_10)
        self.menu_6.addAction(self.action_V_5)
        self.menu_6.addAction(self.action_L_6)
        self.menu_6.addSeparator()
        self.menu_6.addAction(self.条形图)
        self.menu_6.addAction(self.action_P_7)
        self.menu_6.addSeparator()
        self.menu_6.addAction(self.action_T_11)
        self.menu_6.addAction(self.action_A_13)
        self.menu_6.addSeparator()
        self.menu_6.addAction(self.action_C_10)
        self.menu_6.addAction(self.action3D_3)
        self.menu_6.addAction(self.action3D_U)
        self.menu_7.addAction(self.action_N_13)
        self.menu_7.addAction(self.action_P_6)
        self.menu_7.addSeparator()
        self.menu_7.addAction(self.action_E_14)
        self.menu_7.addAction(self.action_O_7)
        self.menu_7.addSeparator()
        self.menu_7.addAction(self.action_F_3)
        self.menu_7.addAction(self.action_R_13)
        self.menu_7.addSeparator()
        self.menu_7.addAction(self.action_A_12)
        self.menu_8.addAction(self.actionMicrodoft_C)
        self.menu_8.addAction(self.action_N_12)
        self.menu_8.addAction(self.actionWindows_E)
        self.menu_8.addSeparator()
        self.menu_8.addAction(self.action_T_10)
        self.menu_8.addAction(self.action_B_6)
        self.menu_8.addSeparator()
        self.menu_8.addAction(self.action_Z)
        self.menu_8.addAction(self.action_O_6)
        self.menu_8.addAction(self.action_P_5)
        self.menu_8.addAction(self.action_F_2)
        self.menu_9.addAction(self.action_C_9)
        self.menu_9.addAction(self.action_T_9)
        self.menu_9.addAction(self.action_N_11)
        self.menu_9.addAction(self.action_R_12)
        self.menu_9.addAction(self.action_A_11)
        self.menu_9.addAction(self.action_E_13)
        self.menu_9.addSeparator()
        self.menu_9.addAction(self.action_L_5)
        self.menu_9.addAction(self.action_U_9)
        self.menu_9.addSeparator()
        self.menu_9.addAction(self.action1_2)
        self.menu_9.addAction(self.action2_Project_Mananger)
        self.menu_9.addAction(self.action3_1)
        self.menu_10.addAction(self.action_54)
        self.menu_10.addAction(self.actionStatGuide)
        self.menu_10.addAction(self.action_55)
        self.menu_10.addSeparator()
        self.menu_10.addAction(self.action_56)
        self.menu_10.addAction(self.action_57)
        self.menu_10.addSeparator()
        self.menu_10.addAction(self.action_58)
        self.menu_10.addSeparator()
        self.menu_10.addAction(self.action_59)
        self.menu_10.addSeparator()
        self.menu_10.addAction(self.action_60)
        self.menu_10.addAction(self.action_61)
        self.menu_10.addSeparator()
        self.menu_10.addAction(self.action_A_10)
        self.menuBar.addAction(self.menu.menuAction())
        self.menuBar.addAction(self.menu_2.menuAction())
        self.menuBar.addAction(self.menu_3.menuAction())
        self.menuBar.addAction(self.menu_4.menuAction())
        self.menuBar.addAction(self.menu_5.menuAction())
        self.menuBar.addAction(self.menu_6.menuAction())
        self.menuBar.addAction(self.menu_7.menuAction())
        self.menuBar.addAction(self.menu_8.menuAction())
        self.menuBar.addAction(self.menu_9.menuAction())
        self.menuBar.addAction(self.menu_10.menuAction())
        self.toolBar.addAction(self.action_2)
        self.toolBar.addAction(self.action)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.action1)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.action2)
        self.toolBar.addAction(self.action_4)
        self.toolBar.addAction(self.action_6)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.action_7)
        self.toolBar.addAction(self.action_U_2)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.action_I_2)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.action_8)
        self.toolBar.addAction(self.action_9)
        self.toolBar.addAction(self.action_10)
        self.toolBar.addAction(self.action_11)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.action_12)
        self.toolBar.addAction(self.action_13)
        self.toolBar.addAction(self.action_StatGuide)
        self.toolBar_2.addAction(self.actionfx)
        self.toolBar_2.addSeparator()
        self.toolBar_2.addAction(self.action_14)
        self.toolBar_2.addAction(self.action_15)
        self.toolBar_2.addAction(self.action_16)
        self.toolBar_2.addAction(self.action_17)
        self.toolBar_2.addSeparator()
        self.toolBar_2.addAction(self.action_18)
        self.toolBar_2.addAction(self.action_19)
        self.toolBar_2.addSeparator()
        self.toolBar_2.addAction(self.action_E_6)
        self.toolBar_3.addAction(self.action_20)
        self.toolBar_3.addAction(self.action_21)
        self.toolBar_3.addAction(self.action_22)
        self.toolBar_3.addAction(self.action_23)
        self.toolBar_3.addAction(self.action_24)
        self.toolBar_3.addAction(self.action_25)
        self.toolBar_3.addAction(self.action_26)
        self.toolBar_3.addAction(self.action_27)
        self.toolBar_4.addAction(self.action_28)
        self.toolBar_4.addAction(self.action_29)
        self.toolBar_4.addAction(self.action_30)
        self.toolBar_4.addAction(self.action_31)
        self.toolBar_4.addAction(self.action_32)
        self.toolBar_4.addAction(self.action_ReportPad)
        self.toolBar_4.addAction(self.action_33)
        self.toolBar_4.addAction(self.action_34)

        self.retranslateUi(MainWindow)

        #导入文件中的数据
        self.action_W.triggered.connect(self.import_xlsx)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        # 设置跳转单样本动作的文本和触发时的槽函数
        self.action_t_2.triggered.connect(self.open_two_sample_t_test_window) #打开双样本界面
        self.action_N_4.triggered.connect(self.open_A_D_window)
        self.action_N_15.triggered.connect(self.open_cpk_ppk_window)  #打开CPK-PPK界面
        self.action_t_1.triggered.connect(self.open_t_test_window3)#打开单样本界面
        self.action_R_R_G.triggered.connect(self.open_gr_r_window) #打开GR-R界面
        self.action_O_3.triggered.connect(self.open_single_factor_window) #打开单因子界面
        self.action_O_4.triggered.connect(self.open_double_ratio_window) #打开双比率界面
        self.action_R_6.triggered.connect(self.open_single_ratio_window) #打开单比率界面
        self.actionKmeans.triggered.connect(self.open_kmeans_window)  # 打开Kmeans界面
    ###界面控件的别名
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "SigmaUp"))
        #self.pushButton.setText(_translate("MainWindow", "打开"))
        self.action_t_1.setText(_translate("MainWindow", "单样本 t(1)"))
        self.action_t_2.setText(_translate("MainWindow", "双样本 t(2)"))
        self.action_O_3.setText(_translate("MainWindow", "单因子"))
        self.action_N.setText(_translate("MainWindow", "新建"))
        self.action_R_6.setText(_translate("MainWindow", "单比率"))
        self.action_O_4.setText(_translate("MainWindow", "双比率"))
        self.actionKmeans.setText(_translate("MainWindow", "Kmeans"))
        self.textBrowser.setHtml(_translate("MainWindow",
                                            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                            "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                            "p, li { white-space: pre-wrap; }\n"
                                            "</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
                                            "<p align=\"left\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">欢迎使用 SigmaUp，请按 F1 获得有关帮助。</p>\n"
                                            "<p align=\"left\" style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))

        # 单元格

        self.menu.setTitle(_translate("MainWindow", "文件(&F)"))
        self.menu_F.setTitle(_translate("MainWindow", "其他文件(F)"))
        self.menu_2.setTitle(_translate("MainWindow", "编辑(&E)"))
        self.menu_K.setTitle(_translate("MainWindow", "工作表链接(K)"))
        self.menu_3.setTitle(_translate("MainWindow", "数据(&A)"))
        self.menu_C.setTitle(_translate("MainWindow", "复制(C)"))
        self.menu_T.setTitle(_translate("MainWindow", "堆叠(T)"))
        self.menu_O.setTitle(_translate("MainWindow", "编码(O)"))
        self.menu_H.setTitle(_translate("MainWindow", "更改数据类型(H)"))
        self.menu_X.setTitle(_translate("MainWindow", "从日期/时间提取(X)"))
        self.menu_4.setTitle(_translate("MainWindow", "计算(&C)"))
        self.menu_P.setTitle(_translate("MainWindow", "产生模板化数据(P)"))
        self.menu_R.setTitle(_translate("MainWindow", "随机数据(R)"))
        self.menu_D.setTitle(_translate("MainWindow", "概率分布(D)"))
        self.menu_M.setTitle(_translate("MainWindow", "矩阵(M)"))
        self.menu_5.setTitle(_translate("MainWindow", "统计(&S)"))
        self.menu_B.setTitle(_translate("MainWindow", "基本统计量(B)"))
        self.menu_A.setTitle(_translate("MainWindow", "方差分析(A)"))
        self.menu_M_2.setTitle(_translate("MainWindow", "多变量(M)"))
        self.menu_Q.setTitle(_translate("MainWindow", "质量工具(Q)"))
        self.menu_A_2.setTitle(_translate("MainWindow", "能力分析(A)"))
        self.menu_G.setTitle(_translate("MainWindow", "能量研究(G)"))
        self.menu_6.setTitle(_translate("MainWindow", "图形(&G)"))
        self.menu_7.setTitle(_translate("MainWindow", "编辑器(D)"))
        self.menu_8.setTitle(_translate("MainWindow", "工具(&I)"))
        self.menu_9.setTitle(_translate("MainWindow", "窗口(&W)"))
        self.menu_10.setTitle(_translate("MainWindow", "帮助(&H)"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))
        self.toolBar_2.setWindowTitle(_translate("MainWindow", "toolBar_2"))
        self.toolBar_3.setWindowTitle(_translate("MainWindow", "toolBar_3"))
        self.toolBar_4.setWindowTitle(_translate("MainWindow", "toolBar_4"))
        self.action_N.setText(_translate("MainWindow", "新建(&N)"))
        self.action_O.setText(_translate("MainWindow", "打开项目(&O)"))
        self.action_O_2.setText(_translate("MainWindow", "打开项目(&O)"))
        self.action_S.setText(_translate("MainWindow", "保存项目(&S)"))
        self.action_A.setText(_translate("MainWindow", "将项目另存为(A)"))
        self.action_R.setText(_translate("MainWindow", "项目说明(R)"))
        self.action_W.setText(_translate("MainWindow", "打开工作表(W)"))
        self.action_C.setText(_translate("MainWindow", "保存当前工作表(C)"))
        self.action_E.setText(_translate("MainWindow", "将当前工作表另存为(E)"))
        self.action_D.setText(_translate("MainWindow", "工作表说明(D)"))
        self.action_L.setText(_translate("MainWindow", "关闭工作表(&L)"))
        self.action_ODbc_Q.setText(_translate("MainWindow", "查询数据库(ODbc)(Q)"))
        self.action_G.setText(_translate("MainWindow", "打开图形(G)"))
        self.action_V.setText(_translate("MainWindow", "将会话窗口另存为(V)"))
        self.action_P.setText(_translate("MainWindow", "打印会话窗口(&P)"))
        self.action_5.setText(_translate("MainWindow", "打印设置(T)"))
        self.action_X.setText(_translate("MainWindow", "退出(X)"))
        self.action_I.setText(_translate("MainWindow", "导入特殊文本(I)"))
        self.action_E_2.setText(_translate("MainWindow", "导出特殊文本(E)"))
        self.action_R_2.setText(_translate("MainWindow", "运行可执行文件(R)"))
        self.action_U.setText(_translate("MainWindow", "无法撤消(U)"))
        self.action_U_2.setText(_translate("MainWindow", "无法重做(R)"))
        self.action_E_3.setText(_translate("MainWindow", "清除(E)"))
        self.action_D_2.setText(_translate("MainWindow", "删除(D)"))
        self.action_Q.setText(_translate("MainWindow", "复制(Q)"))
        self.action_T.setText(_translate("MainWindow", "剪切(T)"))
        self.action_P_2.setText(_translate("MainWindow", "粘贴(P)"))
        self.action_L_2.setText(_translate("MainWindow", "粘贴链接(L)"))
        self.action_A_2.setText(_translate("MainWindow", "全选(&A)"))
        self.action_I_2.setText(_translate("MainWindow", "编辑最后一个对话框(I)"))
        self.action_M.setText(_translate("MainWindow", "命令行编辑器(M)"))
        self.action_M_2.setText(_translate("MainWindow", "管理链接(M)"))
        self.action_G_2.setText(_translate("MainWindow", "获取外部数据(G)"))
        self.action_E_4.setText(_translate("MainWindow", "执行外部命令(E)"))
        self.action_B.setText(_translate("MainWindow", "子集化工作表(B)"))
        self.action_P_3.setText(_translate("MainWindow", "拆分工作表(P)"))
        self.action_M_3.setText(_translate("MainWindow", "合并工作表(M)"))
        self.action_U_3.setText(_translate("MainWindow", "拆分列(U)"))
        self.action_A_3.setText(_translate("MainWindow", "转置列(A)"))
        self.action_S_2.setText(_translate("MainWindow", "排序(S)"))
        self.action_R_3.setText(_translate("MainWindow", "排秩(R)"))
        self.action_D_3.setText(_translate("MainWindow", "删除行(D)"))
        self.action_E_5.setText(_translate("MainWindow", "删除变量(E)\n"
                                                         ""))
        self.action_N_2.setText(_translate("MainWindow", "合并(N)"))
        self.action_I_3.setText(_translate("MainWindow", "显示数据(I)\n"
                                                         ""))
        self.action_I_3.setToolTip(_translate("MainWindow", "显示数据(I)"))
        self.action_2.setText(_translate("MainWindow", "新建"))
        self.action.setText(_translate("MainWindow", "保存"))
        self.action1.setText(_translate("MainWindow", "1"))
        self.action_L_3.setText(_translate("MainWindow", "计算器(L)"))
        self.action_3.setText(_translate("MainWindow", "列统计量(C)\n"
                                                       ""))
        self.action_C_3.setText(_translate("MainWindow", "行统计量(C)\n"
                                                         ""))
        self.action_S_3.setText(_translate("MainWindow", "标准化(S)"))
        self.action_S_4.setText(_translate("MainWindow", "简单数集(S)"))
        self.action_A_4.setText(_translate("MainWindow", "任意数值(A)"))
        self.action2.setText(_translate("MainWindow", "2"))
        self.action_4.setText(_translate("MainWindow", "复制"))
        self.action_6.setText(_translate("MainWindow", "粘贴"))
        self.action_7.setText(_translate("MainWindow", "撤销"))
        self.action_8.setText(_translate("MainWindow", "上一个命令"))
        self.action_9.setText(_translate("MainWindow", "下一个命令"))
        self.action_10.setText(_translate("MainWindow", "在窗口中查找"))
        self.action_11.setText(_translate("MainWindow", "查找搜索下一个命令"))
        self.action_12.setText(_translate("MainWindow", "通过命令中断"))
        self.action_13.setText(_translate("MainWindow", "帮助"))
        self.action_StatGuide.setText(_translate("MainWindow", "打开StatGuide"))
        self.actionfx.setText(_translate("MainWindow", "fx"))
        self.action_14.setText(_translate("MainWindow", "插入单元格"))
        self.action_15.setText(_translate("MainWindow", "插入行"))
        self.action_16.setText(_translate("MainWindow", "插入列"))
        self.action_17.setText(_translate("MainWindow", "移动列"))
        self.action_18.setText(_translate("MainWindow", "上一被刷行"))
        self.action_19.setText(_translate("MainWindow", "下一被刷行"))
        self.action_E_6.setText(_translate("MainWindow", "清除(E)"))
        self.action_20.setText(_translate("MainWindow", "选择模式"))
        self.action_21.setText(_translate("MainWindow", "文本"))
        self.action_22.setText(_translate("MainWindow", "矩形"))
        self.action_23.setText(_translate("MainWindow", "椭圆"))
        self.action_24.setText(_translate("MainWindow", "直线"))
        self.action_25.setText(_translate("MainWindow", "标记"))
        self.action_26.setText(_translate("MainWindow", "折线"))
        self.action_27.setText(_translate("MainWindow", "多边形"))
        self.action_28.setText(_translate("MainWindow", "显示会话文件"))
        self.action_29.setText(_translate("MainWindow", "显示工作表文件夹"))
        self.action_30.setText(_translate("MainWindow", "显示图形文件夹"))
        self.action_31.setText(_translate("MainWindow", "显示当前工作表中有关列的信息"))
        self.action_32.setText(_translate("MainWindow", "显示命令历史记录文件夹"))
        self.action_ReportPad.setText(_translate("MainWindow", "显示ReportPad"))
        self.action_33.setText(_translate("MainWindow", "显示相关文档文件夹"))
        self.action_34.setText(_translate("MainWindow", "显示设计"))
        self.actionchans.setText(_translate("MainWindow", "产生网格数据(H)"))
        self.action_I_4.setText(_translate("MainWindow", "产生指示变量(I)"))
        self.action_B_2.setText(_translate("MainWindow", "设置基数(B)"))
        self.action_R_5.setText(_translate("MainWindow", "回归(R)"))
        self.actionDOE_D.setText(_translate("MainWindow", "DOE(D)"))
        self.action_C_4.setText(_translate("MainWindow", "控制图(C)"))
        self.action_L_4.setText(_translate("MainWindow", "可靠性/生存(L)"))
        self.action_S_5.setText(_translate("MainWindow", "时间序列(S)"))
        self.action_T_3.setText(_translate("MainWindow", "表格(T)"))
        self.action_N_3.setText(_translate("MainWindow", "非参数(N)"))
        self.actionEDA_E.setText(_translate("MainWindow", "EDA(E)"))
        self.action_P_4.setText(_translate("MainWindow", "功效和样本数量(P)"))
        self.action_D_5.setText(_translate("MainWindow", "显示描述性统计(D)"))
        self.action_S_6.setText(_translate("MainWindow", "存储描述性统计(S)"))
        self.action_G_3.setText(_translate("MainWindow", "图形化汇总(G)"))
        self.action_Z_Z.setText(_translate("MainWindow", "单样本Z(Z)"))
        self.action_t_1.setText(_translate("MainWindow", "单样本 t(1)"))
        self.action_t_2.setText(_translate("MainWindow", "双样本 t(2)"))
        self.action_t_P.setText(_translate("MainWindow", "配对t(P)"))
        self.action_R_6.setText(_translate("MainWindow", "单比率(R)"))
        self.action_O_4.setText(_translate("MainWindow", "双比率(O)"))
        self.action_Poisson_L.setText(_translate("MainWindow", "单样本 Poisson率(L)"))
        self.action_Poisson_I.setText(_translate("MainWindow", "双样本 Poisson率(I)"))
        self.action_E_7.setText(_translate("MainWindow", "单方差(E)"))
        self.action_A_6.setText(_translate("MainWindow", "双方差(A)"))
        self.action_C_5.setText(_translate("MainWindow", "相关(C)"))
        self.action_V_2.setText(_translate("MainWindow", "协方差(V)"))
        self.action_N_4.setText(_translate("MainWindow", "正态性检验(N)"))
        self.actionPoisson_F.setText(_translate("MainWindow", "Poisson分布的拟合优度检验(F)"))
        self.action_C_6.setText(_translate("MainWindow", "列到列(C)\n"
                                                         ""))
        self.action_N_5.setText(_translate("MainWindow", "常量到常量(N)"))
        self.action_M_6.setText(_translate("MainWindow", "矩阵到矩阵(M)\n"
                                                         ""))
        self.action_S_7.setText(_translate("MainWindow", "常量到列(S)\n"
                                                         ""))
        self.action_O_5.setText(_translate("MainWindow", "列到常量(O)\n"
                                                         ""))
        self.action_T_4.setText(_translate("MainWindow", "矩阵到列(T)\n"
                                                         ""))
        self.action_U_4.setText(_translate("MainWindow", "列到矩阵(U)"))
        self.action_W_2.setText(_translate("MainWindow", "工作表到工作表(W)"))
        self.action_C_7.setText(_translate("MainWindow", "列(C)"))
        self.action_B_3.setText(_translate("MainWindow", "列的区组(B)"))
        self.action_R_7.setText(_translate("MainWindow", "行(R)"))
        self.action_N_6.setText(_translate("MainWindow", "数字到数字(N)"))
        self.action_U_5.setText(_translate("MainWindow", "数字到文本(U)"))
        self.action_M_7.setText(_translate("MainWindow", "数字到日期/时间(M)"))
        self.action_X_3.setText(_translate("MainWindow", "文本到文本(X)"))
        self.action_E_8.setText(_translate("MainWindow", "文本到数字(E)"))
        self.action_I_5.setText(_translate("MainWindow", "文本到日期/时间(I)"))
        self.action_D_6.setText(_translate("MainWindow", "日期/时间到日期/时间(D)"))
        self.action_A_7.setText(_translate("MainWindow", "日期/时间到数字(A)"))
        self.action_T_5.setText(_translate("MainWindow", "日期/时间到文本(T)"))
        self.action_S_8.setText(_translate("MainWindow", "使用转换表(S)"))
        self.action_N_7.setText(_translate("MainWindow", "数字到文本(N)"))
        self.action_T_6.setText(_translate("MainWindow", "文本到数字(T)"))
        self.action_D_7.setText(_translate("MainWindow", "日期/时间到文本(D)"))
        self.action_A_8.setText(_translate("MainWindow", "日期/时间到数字(A)"))
        self.action_U_6.setText(_translate("MainWindow", "数字到日期/时间(U)"))
        self.action_E_9.setText(_translate("MainWindow", "文本到日期/时间(E)"))
        self.action_N_8.setText(_translate("MainWindow", "到数字(N)"))
        self.action_T_7.setText(_translate("MainWindow", "到文本(T)"))
        self.action_I_6.setText(_translate("MainWindow", "日期/时间值的简单数集(I)"))
        self.action_R_8.setText(_translate("MainWindow", "日期/时间值的任意集合(R)"))
        self.action_C_8.setText(_translate("MainWindow", "来自列的样本(C)"))
        self.action_Q_3.setText(_translate("MainWindow", "卡方(Q)"))
        self.action_N_9.setText(_translate("MainWindow", "正态(N)"))
        self.action_43.setText(_translate("MainWindow", "多元正态\n"
                                                        "\n"
                                                        ""))
        self.actionF_F.setText(_translate("MainWindow", "F(F)"))
        self.actiont_T.setText(_translate("MainWindow", "t(T)"))
        self.action_U_7.setText(_translate("MainWindow", "均匀(U)"))
        self.actionBernoulli.setText(_translate("MainWindow", "Bernoulli"))
        self.action_B_4.setText(_translate("MainWindow", "二项(B)"))
        self.action_44.setText(_translate("MainWindow", "几何"))
        self.action_45.setText(_translate("MainWindow", "负二项"))
        self.action_H_2.setText(_translate("MainWindow", "超几何(H)"))
        self.action_D_8.setText(_translate("MainWindow", "任意离散(D)"))
        self.action_I_7.setText(_translate("MainWindow", "整数均匀(I)"))
        self.actionPoisson_P.setText(_translate("MainWindow", "Poisson(P)"))
        self.actionBeta_A.setText(_translate("MainWindow", "Beta(A)\n"
                                                           ""))
        self.actionCauchy_Y.setText(_translate("MainWindow", "Cauchy(Y)\n"
                                                             ""))
        self.action_X_4.setText(_translate("MainWindow", "指数(X)"))
        self.actionGamma_G.setText(_translate("MainWindow", "Gamma(G)"))
        self.actionLaplace_L.setText(_translate("MainWindow", "Laplace(L)"))
        self.action_E_10.setText(_translate("MainWindow", "最大极值(E)"))
        self.actionLodistic_O.setText(_translate("MainWindow", "Lodistic(O)"))
        self.action_Logistic_S.setText(_translate("MainWindow", "对数Logistic(S)"))
        self.action_M_8.setText(_translate("MainWindow", "对数正态(M)"))
        self.action_V_3.setText(_translate("MainWindow", "最小极值(V)"))
        self.action_R_9.setText(_translate("MainWindow", "三角形(R)"))
        self.actionWeibull_W.setText(_translate("MainWindow", "Weibull(W)"))
        self.action_Q_4.setText(_translate("MainWindow", "卡方(Q)"))
        self.action_N_10.setText(_translate("MainWindow", "正态(N)\n"
                                                          ""))
        self.action_46.setText(_translate("MainWindow", "多元正态\n"
                                                        ""))
        self.actionF_F_2.setText(_translate("MainWindow", "F(F)\n"
                                                          ""))
        self.actiont_T_2.setText(_translate("MainWindow", "t(T)\n"
                                                          ""))
        self.action_U_8.setText(_translate("MainWindow", "均匀(U)\n"
                                                         ""))
        self.actionBernoulli_2.setText(_translate("MainWindow", "Bernoulli\n"
                                                                ""))
        self.action_B_5.setText(_translate("MainWindow", "二项(B)\n"
                                                         ""))
        self.action_47.setText(_translate("MainWindow", "几何\n"
                                                        ""))
        self.action_48.setText(_translate("MainWindow", "负二项"))
        self.action_H_3.setText(_translate("MainWindow", "超几何(H)\n"
                                                         ""))
        self.action_D_9.setText(_translate("MainWindow", "任意离散(D)\n"
                                                         ""))
        self.action_I_8.setText(_translate("MainWindow", "整数均匀(I)\n"
                                                         ""))
        self.actionPoisson_P_2.setText(_translate("MainWindow", "Poisson(P)\n"
                                                                ""))
        self.actionBeta_A_2.setText(_translate("MainWindow", "Beta(A)\n"
                                                             ""))
        self.actionCauchy_Y_2.setText(_translate("MainWindow", "Cauchy(Y)\n"
                                                               ""))
        self.action_X_5.setText(_translate("MainWindow", "指数(X)\n"
                                                         ""))
        self.actionGamma_G_2.setText(_translate("MainWindow", "Gamma(G)\n"
                                                              ""))
        self.actionLaplace_L_2.setText(_translate("MainWindow", "Laplace(L)\n"
                                                                ""))
        self.action_E_11.setText(_translate("MainWindow", "最大极值(E)"))
        self.actionLodistic_O_2.setText(_translate("MainWindow", "Lodistic(O)\n"
                                                                 ""))
        self.action_Logistic_S_2.setText(_translate("MainWindow", "对数Logistic(S)\n"
                                                                  ""))
        self.action_M_9.setText(_translate("MainWindow", "对数正态(M)\n"
                                                         ""))
        self.action_V_4.setText(_translate("MainWindow", "最小极值(V)\n"
                                                         ""))
        self.action_R_10.setText(_translate("MainWindow", "三角形(R)\n"
                                                          ""))
        self.actionWeibull_W_2.setText(_translate("MainWindow", "Weibull(W)"))
        self.action_R_11.setText(_translate("MainWindow", "读取(R)"))
        self.action_T_8.setText(_translate("MainWindow", "转置(T)"))
        self.action_I_9.setText(_translate("MainWindow", "求逆矩阵(I)"))
        self.action_F.setText(_translate("MainWindow", "定义常量矩阵(F)"))
        self.action_D_10.setText(_translate("MainWindow", "对角矩阵(D)"))
        self.action_E_12.setText(_translate("MainWindow", "特征分析(E)"))
        self.action_A_9.setText(_translate("MainWindow", "矩阵算术(A)"))
        self.action_54.setText(_translate("MainWindow", "帮助(H)"))
        self.actionStatGuide.setText(_translate("MainWindow", "StatGuide(S)"))
        self.action_55.setText(_translate("MainWindow", "教程(T)"))
        self.action_56.setText(_translate("MainWindow", "词汇表(G)"))
        self.action_57.setText(_translate("MainWindow", "方法和公式(M)"))
        self.action_58.setText(_translate("MainWindow", "问管知识库(R)"))
        self.action_59.setText(_translate("MainWindow", "键盘图(K)"))
        self.action_60.setText(_translate("MainWindow", "检查更新(C)"))
        self.action_61.setText(_translate("MainWindow", "联系我们(N)"))
        self.action_A_10.setText(_translate("MainWindow", "关于(A)"))
        self.action_C_9.setText(_translate("MainWindow", "层叠(C)\n"
                                                         ""))
        self.action_T_9.setText(_translate("MainWindow", "平铺(T)\n"
                                                         ""))
        self.action_N_11.setText(_translate("MainWindow", "全部最小化(N)\n"
                                                          ""))
        self.action_R_12.setText(_translate("MainWindow", "回复图标(R)\n"
                                                          ""))
        self.action_A_11.setText(_translate("MainWindow", "排列图标(A)"))
        self.action_E_13.setText(_translate("MainWindow", "刷新(E)\n"
                                                          ""))
        self.action_L_5.setText(_translate("MainWindow", "关闭所有图形(L)\n"
                                                         ""))
        self.action_U_9.setText(_translate("MainWindow", "立即更新所有回话(U)\n"
                                                         ""))
        self.action1_2.setText(_translate("MainWindow", "1 会话\n"
                                                        ""))
        self.action2_Project_Mananger.setText(_translate("MainWindow", "2 Project Mananger\n"
                                                                       ""))
        self.action3_1.setText(_translate("MainWindow", "3 工作表1***\n"
                                                        ""))
        self.actionMicrodoft_C.setText(_translate("MainWindow", "Microdoft 计算器(C)"))
        self.action_N_12.setText(_translate("MainWindow", "记事本(N)\n"
                                                          ""))
        self.actionWindows_E.setText(_translate("MainWindow", "Windows 资源管理器(E)\n"
                                                              ""))
        self.action_T_10.setText(_translate("MainWindow", "工具栏(T)"))
        self.action_B_6.setText(_translate("MainWindow", "状态栏(B)\n"
                                                         ""))
        self.action_Z.setText(_translate("MainWindow", "自定义(Z)\n"
                                                       ""))
        self.action_O_6.setText(_translate("MainWindow", "选项(O)\n"
                                                         ""))
        self.action_P_5.setText(_translate("MainWindow", "管理配置文件(P)\n"
                                                         ""))
        self.action_F_2.setText(_translate("MainWindow", "文件安全性(F)\n"
                                                         ""))
        self.action_N_13.setText(_translate("MainWindow", "下一个命令(N)"))
        self.action_P_6.setText(_translate("MainWindow", "上一个命令(P)\n"
                                                         ""))
        self.action_E_14.setText(_translate("MainWindow", "启用命令(E)\n"
                                                          ""))
        self.action_O_7.setText(_translate("MainWindow", "输出可编辑(O)\n"
                                                         ""))
        self.action_F_3.setText(_translate("MainWindow", "查找(F)\n"
                                                         ""))
        self.action_R_13.setText(_translate("MainWindow", "替换(R)\n"
                                                          ""))
        self.action_A_12.setText(_translate("MainWindow", "应用字体(A)\n"
                                                          ""))
        self.action_S_9.setText(_translate("MainWindow", "散点图(S)"))
        self.action_M_10.setText(_translate("MainWindow", "矩形图(M)\n"
                                                          ""))
        self.action_N_14.setText(_translate("MainWindow", "边际图(N)\n"
                                                          ""))
        self.action_H_4.setText(_translate("MainWindow", "直方图(H)"))
        self.action_D_11.setText(_translate("MainWindow", "点图(D)\n"
                                                          ""))
        self.action_F_4.setText(_translate("MainWindow", "茎叶图(F)\n"
                                                         ""))
        self.action_Y.setText(_translate("MainWindow", "概率图(Y)\n"
                                                       ""))
        self.action_E_15.setText(_translate("MainWindow", "经验累积分布函数(E)\n"
                                                          ""))
        self.action_O_8.setText(_translate("MainWindow", "概率分布图(O)\n"
                                                         ""))
        self.action_B_7.setText(_translate("MainWindow", "箱线图(B)\n"
                                                         ""))
        self.action_I_10.setText(_translate("MainWindow", "区间图(I)\n"
                                                          ""))
        self.action_V_5.setText(_translate("MainWindow", "单值图(V)\n"
                                                         ""))
        self.action_L_6.setText(_translate("MainWindow", "线条图(L)\n"
                                                         ""))
        self.条形图.setText(_translate("MainWindow", "条形图(R)\n"
                                                     ""))
        self.action_P_7.setText(_translate("MainWindow", "饼图(P)\n"
                                                         ""))
        self.action_T_11.setText(_translate("MainWindow", "时间序列图(T)\n"
                                                          ""))
        self.action_A_13.setText(_translate("MainWindow", "区域图(A)\n"
                                                          ""))
        self.action_C_10.setText(_translate("MainWindow", "等值线图(C)\n"
                                                          ""))
        self.action3D_3.setText(_translate("MainWindow", "3D散点图(3)\n"
                                                         ""))
        self.action3D_U.setText(_translate("MainWindow", "3D曲面图(U)\n"
                                                         ""))
        self.action_O_3.setText(_translate("MainWindow", "单因子(O)"))
        self.actionKmeans.setText(_translate("MainWindow", "Kmeans"))
        self.action_N_15.setText(_translate("MainWindow", "正态(N)\n"
                                                          ""))
        self.action_R_R_G.setText(_translate("MainWindow", "量具 R&R 研究(交叉)(G)"))

    ###Test模块试例
    # def open(self):
    #     import untitled2, untitled3
    #     self.second = untitled2.Ui_MainWindow()  # 创建第2个窗体对象
    #     self.second.show()  # 显示窗体
    #     self.third = untitled3.Ui_MainWindow()  # 创建第3个窗体对象
    #     self.third.show()  # 显示窗体

     #####双样本t检验界面
    def open_two_sample_t_test_window(self):
        try:
            import Two_sample_t_test
            print("成功导入 Two_sample_t_test 模块")
            self.fouth = Two_sample_t_test.Ui_MainWindow(self)
            print("成功创建 Ui_MainWindow 实例")
            self.fouth.show()
            print("已调用 show() 方法显示窗口")
        except ImportError as e:
            print(f"导入模块时出错: {e}")
        except Exception as e:
            print(f"创建或显示窗口时出错: {e}")
    ###打开CPK-PPK界面实现

    def open_A_D_window(self):
        try:
            import A_D
            print("成功导入 A_D 模块")
            self.fourth = A_D.Ui_MainWindow(self)
            print("成功创建 Ui_MainWindow 实例")
            self.fourth.show()
            print("已调用 show() 方法显示窗口")
        except ImportError as e:
            print(f"导入模块时出错: {e}")
        except Exception as e:
            print(f"创建或显示窗口时出错: {e}")

    def open_cpk_ppk_window(self):
            try:
                import cpk_ppk
                print("成功导入 cpk_ppk 模块")
                self.six = cpk_ppk.Ui_MainWindow(self)
                print("成功创建 Ui_MainWindow 实例")
                self.six.show()
                print("已调用 show() 方法显示窗口")
            except ImportError as e:
                print(f"导入模块时出错: {e}")
            except Exception as e:
                print(f"创建或显示窗口时出错: {e}")
    ##打开单样本t检验界面
    def open_t_test_window3(self):
        try:
            import One_sample_t_test
            self.fifth = One_sample_t_test.Ui_MainWindow(self)
            self.fifth.show()
        except ImportError as e:
            print(f"导入模块时出错: {e}")
        except Exception as e:
            print(f"创建或显示窗口时出错: {e}")
    ## GR-R 实现
    def open_gr_r_window(self):
        try:
            import GR_R
            print("成功导入 GR_R 模块")
            self.seven = GR_R.Ui_MainWindow(self)
            print("成功创建 Ui_MainWindow 实例")
            self.seven.show()
            print("已调用 show() 方法显示窗口")
        except ImportError as e:
            print(f"导入模块时出错: {e}")
        except Exception as e:
            print(f"创建或显示窗口时出错: {e}")
    ##单因子方差分析
    def open_single_factor_window(self):
        """单因子方差分析"""
        try:
            import single_factor
            print("成功导入 单因子方差分析 模块")
            self.eleven= single_factor.Ui_MainWindow(self)
            print("成功创建 Ui_MainWindow 实例")
            self.eleven.show()
            print("已调用 show() 方法显示窗口")
        except ImportError as e:
            print(f"导入模块时出错: {e}")
        except Exception as e:
            print(f"创建或显示窗口时出错: {e}")
    def open_double_ratio_window(self):
        """双比率实现"""
        try:
            import Double_Ratio
            print("成功导入 双比率 模块")
            self.eight= Double_Ratio.Ui_MainWindow(self)
            print("成功创建 Ui_MainWindow 实例")
            self.eight.show()
            print("已调用 show() 方法显示窗口")
        except ImportError as e:
            print(f"导入模块时出错: {e}")
        except Exception as e:
            print(f"创建或显示窗口时出错: {e}")
    def open_single_ratio_window(self):  #双比例实现
      """双比率"""
      try:
          import Single_Ratio
          print("成功导入 单比率模块")
          self.ten = Single_Ratio.Ui_MainWindow(self)
          print("成功创建 Ui_MainWindow 实例")
          self.ten.show()
          print("已调用 show() 方法显示窗口")
      except ImportError as e:
          print(f"导入模块时出错: {e}")
      except Exception as e:
          print(f"创建或显示窗口时出错: {e}")
    def open_kmeans_window(self):
       pass
    def update_column_headers(self, cols):
    #更新列标题到指定列数
        current_cols = self.tableWidget.columnCount()
        for col in range(current_cols, cols):
            self.tableWidget.setHorizontalHeaderItem(
                col,
                QtWidgets.QTableWidgetItem(f"C{col + 1}")
            )

    #从外部文件导入数据，支持xlsx,xls文件
    def import_xlsx(self):
        file_path, _ = QtWidgets.QFileDialog.getOpenFileName(
            MainWindow, "Open Excel File", "", "Excel Files (*.xlsx *.xls)"
        )
        if not file_path:
            return

        try:
            # 处理文件路径中的中文和特殊字符
            file_path = os.path.normpath(file_path)
            file_extension = os.path.splitext(file_path)[1].lower()

            if file_extension == '.xlsx':
                # 处理 .xlsx 文件
                workbook = openpyxl.load_workbook(file_path)
                sheet = workbook.active
                data_rows = sheet.max_row
                data_cols = sheet.max_column
                file_type = 'xlsx'
            elif file_extension == '.xls':
                # 处理 .xls 文件
                workbook = xlrd.open_workbook(file_path)
                sheet = workbook.sheet_by_index(0)
                data_rows = sheet.nrows
                data_cols = sheet.ncols
                file_type = 'xls'
            else:
                raise ValueError("不支持的文件格式")

            # 计算最终表格尺寸（至少15x10）
            final_rows = max(data_rows, 15)
            final_cols = max(data_cols, 10)

            # 调整表格尺寸
            self.tableWidget.setRowCount(final_rows)
            self.tableWidget.setColumnCount(final_cols)
            self.update_column_headers(final_cols)  # 更新列标题

            # 精确填充数据
            for row_idx in range(final_rows):
                for col_idx in range(final_cols):
                    value = ""
                    # 只填充实际数据区域
                    if row_idx < data_rows and col_idx < data_cols:
                        try:
                            if file_type == 'xlsx':
                                cell = sheet.cell(row=row_idx + 1, column=col_idx + 1)
                                value = str(cell.value) if cell.value is not None else ""
                            elif file_type == 'xls':
                                cell_value = sheet.cell_value(row_idx, col_idx)
                                # 处理xlrd的日期类型
                                if sheet.cell_type(row_idx, col_idx) == xlrd.XL_CELL_DATE:
                                    dt = xlrd.xldate_as_datetime(cell_value, workbook.datemode)
                                    value = dt.strftime("%Y-%m-%d %H:%M:%S")
                                else:
                                    value = str(cell_value) if cell_value != "" else ""
                        except Exception as e:
                            print(f"Error reading cell ({row_idx}, {col_idx}): {str(e)}")

                    # 防止重复创建item对象
                    if not self.tableWidget.item(row_idx, col_idx):
                        self.tableWidget.setItem(row_idx, col_idx, QtWidgets.QTableWidgetItem(value))
                    else:
                        self.tableWidget.item(row_idx, col_idx).setText(value)

            # 自动调整列宽（仅前data_cols列）
            for col in range(data_cols):
                self.tableWidget.resizeColumnToContents(col)

        except Exception as e:
            QtWidgets.QMessageBox.critical(
                MainWindow,
                "导入错误",
                f"文件读取失败：{str(e)}",
                QtWidgets.QMessageBox.StandardButton.Ok
            )
    #添加右键菜单，包含复制和粘贴功能
    def showContextMenu(self, pos):
        #print(f"右键菜单触发，位置: {pos}")
        global_pos = self.tableWidget.mapToGlobal(pos)
        #print(f"转换后的全局位置: {global_pos}")
        self.contextMenu.exec(global_pos)

   # 单元格复制功能---------------
    def copyTableData(self):
        # 复制表格数据
        selectedRanges = self.tableWidget.selectedRanges()
        clipboard = QtWidgets.QApplication.clipboard()
        text = ""
        for r in selectedRanges:
            for row in range(r.topRow(), r.bottomRow() + 1):
                for col in range(r.leftColumn(), r.rightColumn() + 1):
                    item = self.tableWidget.item(row, col)
                    if item:
                        text += item.text()
                    text += "\t"
                text = text.rstrip("\t") + "\n"
        clipboard.setText(text)
    #单元格粘贴功能---------------
    def pasteTableData(self):
        clipboard = QApplication.clipboard()
        text = clipboard.text()
        rows = text.split('\n')

        if not rows:
            return

        # 记录粘贴前的列宽
        original_col_widths = {}
        for col in range(self.tableWidget.columnCount()):
            original_col_widths[col] = self.tableWidget.columnWidth(col)

        # 获取当前光标位置
        current_row = self.tableWidget.currentRow()
        current_col = self.tableWidget.currentColumn()

        # 计算需要的行列数
        paste_rows = len(rows)
        paste_cols = max(len(row.split('\t')) for row in rows) if rows else 0

        required_rows = max(current_row + paste_rows, self.tableWidget.rowCount(), 15)
        required_cols = max(current_col + paste_cols, self.tableWidget.columnCount(), 10)

        # 调整表格尺寸
        if required_rows > self.tableWidget.rowCount():
            self.tableWidget.setRowCount(required_rows)

        if required_cols > self.tableWidget.columnCount():
            current_col_count = self.tableWidget.columnCount()
            self.tableWidget.setColumnCount(required_cols)
            self.update_column_headers(required_cols)  # 更新列标题

        # 填充数据
        for i, row in enumerate(rows):
            if i + current_row >= required_rows:
                break
            cols = row.split('\t')
            for j, col in enumerate(cols):
                if j + current_col >= required_cols:
                    break
                target_row = current_row + i
                target_col = current_col + j

                item = self.tableWidget.item(target_row, target_col)
                if not item:
                    item = QtWidgets.QTableWidgetItem()
                    self.tableWidget.setItem(target_row, target_col, item)
                item.setText(col.strip())

        # 列宽处理策略
        for col in range(required_cols):
            if col < current_col:
                # 恢复原有列的宽度
                if col in original_col_widths:
                    self.tableWidget.setColumnWidth(col, original_col_widths[col])
                else:
                    self.tableWidget.setColumnWidth(col, 120)  # 默认新列宽
            else:
                # 仅调整新增列的宽度
                self.tableWidget.resizeColumnToContents(col)
                # 设置最小/最大列宽限制
                current_width = self.tableWidget.columnWidth(col)
                self.tableWidget.setColumnWidth(
                    col,
                    max(min(current_width, 300), 80)  # 限制在80-300像素之间
                )

        # 行高保持统一
        self.tableWidget.verticalHeader().setDefaultSectionSize(24)
    #单元格数据的删除功能
    def deleteSelectedCells(self):
        # 获取所有选中的单元格
        selectedCells = self.tableWidget.selectedItems()
        for cell in selectedCells:
            # 创建一个空的 QTableWidgetItem 并设置到对应单元格
            emptyItem = QtWidgets.QTableWidgetItem("")
            self.tableWidget.setItem(cell.row(), cell.column(), emptyItem)

    def display_text(self, text):
        self.textBrowser.append(text)


import sys
# 主方法，程序从此处启动PyQt设计的窗体
if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()  # 创建窗体对象
    ui = Ui_MainWindow()  # 创建PyQt设计的窗体对象
    ui.setupUi(MainWindow)  # 调用PyQt窗体的方法对窗体对象进行初始化设置
    #MainWindow.setWindowFlags(QtCore.Qt.WindowType.WindowCloseButtonHint)  # 只显示关闭按钮
    flags = MainWindow.windowFlags()
    new_flags = flags | QtCore.Qt.WindowType.WindowMinimizeButtonHint | QtCore.Qt.WindowType.WindowMaximizeButtonHint | QtCore.Qt.WindowType.WindowCloseButtonHint
    MainWindow.setWindowFlags(new_flags)
    MainWindow.show()  # 显示窗体
    sys.exit(app.exec())  # 程序关闭时退出进程
