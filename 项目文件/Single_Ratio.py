# Form implementation generated from reading ui file 'untitled8.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
"""
单比率实现
"""

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMainWindow

# Form implementation generated from reading ui file 'untitled8.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
"""
单比率实现
"""

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtWidgets import QMainWindow
from scipy import stats

class Ui_MainWindow(QMainWindow):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(433, 313)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton_6 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(20, 250, 75, 23))
        self.pushButton_6.setObjectName("pushButton_6")
        self.label_2 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(180, 100, 81, 16))
        self.label_2.setObjectName("label_2")
        self.listView_11 = QtWidgets.QListView(parent=self.centralwidget)
        self.listView_11.setGeometry(QtCore.QRect(20, 10, 121, 191))
        self.listView_11.setObjectName("listView_11")
        self.label_5 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(180, 180, 101, 16))
        self.label_5.setObjectName("label_5")
        self.textEdit_3 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_3.setGeometry(QtCore.QRect(240, 120, 101, 21))
        self.textEdit_3.setObjectName("textEdit_3")
        self.textEdit_4 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_4.setGeometry(QtCore.QRect(240, 100, 101, 21))
        self.textEdit_4.setObjectName("textEdit_4")
        self.label_3 = QtWidgets.QLabel(parent=self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(180, 120, 71, 16))
        self.label_3.setObjectName("label_3")
        self.pushButton_3 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(300, 220, 81, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.radioButton = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.radioButton.setGeometry(QtCore.QRect(160, 10, 131, 16))
        self.radioButton.setObjectName("radioButton")
        self.radioButton_2 = QtWidgets.QRadioButton(parent=self.centralwidget)
        self.radioButton_2.setGeometry(QtCore.QRect(160, 80, 131, 16))
        self.radioButton_2.setObjectName("radioButton_2")
        self.textEdit = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit.setGeometry(QtCore.QRect(180, 30, 201, 41))
        self.textEdit.setObjectName("textEdit")
        self.pushButton_4 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(300, 250, 81, 23))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(40, 210, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.textEdit_6 = QtWidgets.QTextEdit(parent=self.centralwidget)
        self.textEdit_6.setGeometry(QtCore.QRect(270, 180, 101, 21))
        self.textEdit_6.setObjectName("textEdit_6")
        self.checkBox = QtWidgets.QCheckBox(parent=self.centralwidget)
        self.checkBox.setGeometry(QtCore.QRect(160, 160, 141, 16))
        self.checkBox.setObjectName("checkBox")
        self.pushButton_5 = QtWidgets.QPushButton(parent=self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(210, 250, 81, 23))
        self.pushButton_5.setObjectName("pushButton_5")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.pushButton_4.clicked.connect(MainWindow.close)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.pushButton.clicked.connect(self.show_selected_column_names)
        # 连接确定按钮的点击信号到获取数据的方法
        self.pushButton_5.clicked.connect(self.perform_single_ratio_test)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "单比率"))
        self.pushButton_6.setText(_translate("MainWindow", "帮助"))
        self.label_2.setText(_translate("MainWindow", "事件数(E):"))
        self.label_5.setText(_translate("MainWindow", "假设比率（H）："))
        self.label_3.setText(_translate("MainWindow", "试验数(T):"))
        self.pushButton_3.setText(_translate("MainWindow", "选项（P）..."))
        self.radioButton.setText(_translate("MainWindow", "列中的样本(C)"))
        self.radioButton_2.setText(_translate("MainWindow", "汇总数据（Z）"))
        self.pushButton_4.setText(_translate("MainWindow", "取消"))
        self.pushButton.setText(_translate("MainWindow", "选择"))
        self.checkBox.setText(_translate("MainWindow", "进行假设检验（T）"))
        self.pushButton_5.setText(_translate("MainWindow", "确定（O）"))

    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window
        self.all_table_data = []  # 用于存储所有表格数据
        self.setupUi(self)
        self.get_table_data()

    # 获取主窗口调用的数据-------------------------------------
    def get_table_data(self):
        table = self.main_window.tableWidget
        rows = table.rowCount()
        columns = table.columnCount()
        print(f"表格行数: {rows}, 列数: {columns}")  # 添加调试信息

        data = []
        for row in range(rows):
            row_data = []
            for col in range(columns):
                item = table.item(row, col)
                if item is not None:
                    row_data.append(item.text())
                else:
                    row_data.append(None)
            data.append(row_data)
        print("获取到的主窗口表格数据:", data)

        # 筛选出有数据的列
        valid_columns = []
        for col in range(columns):
            has_data = False
            for row in range(rows):
                if data[row][col] is not None and data[row][col].strip():
                    has_data = True
                    break
            if has_data:
                valid_columns.append(col)

        # 生成列名
        column_names = [f"c{i + 1}" for i in valid_columns]

        # 创建模型并设置数据
        model = QtGui.QStandardItemModel()
        for name in column_names:
            item = QtGui.QStandardItem(name)
            model.appendRow(item)

        # 将模型设置给 listView_11
        self.listView_11.setModel(model)
        self.all_table_data = data  # 保存所有表格数据

    # 获取选中的列名，将其显示到textEdit中
    def show_selected_column_names(self):
        selected_indexes = self.listView_11.selectedIndexes()
        if not selected_indexes:
            return  # 如果没有选中任何列名，直接返回
        selected_names = [self.listView_11.model().itemFromIndex(index).text() for index in selected_indexes]
        current_text = self.textEdit.toPlainText()
        if current_text:
            new_text = current_text + ", " + ", ".join(selected_names)
        else:
            new_text = ", ".join(selected_names)
        self.textEdit.setPlainText(new_text)

    # 获取选中的列名下的数据，对数据进行单比率检验，最后将分析后的数据传回主界面中
    def perform_single_ratio_test(self):
        # 从 textEdit 中获取选中的列名
        column_names_text = self.textEdit.toPlainText()
        column_names = [name.strip() for name in column_names_text.split(',') if name.strip()]

        rows = len(self.all_table_data)
        if rows == 0:
            print("表格数据为空，无法进行统计计算。")
            return
        columns = len(self.all_table_data[0])

        print(f"当前表格有 {rows} 行, {columns} 列。")
        for column_name in column_names:
            try:
                # 检查列名格式
                if not column_name.startswith('c') or not column_name[1:].isdigit():
                    print(f"无效的列名: {column_name}，列名应形如 'c1', 'c2' 等。")
                    continue
                col_index = int(column_name[1:]) - 1
                # 检查列索引是否越界
                if col_index < 0 or col_index >= columns:
                    print(f"列索引越界: {column_name}，当前计算用列索引为 {col_index}，表格共有 {columns} 列。")
                    continue

                # 先获取列数据
                column_data = [self.all_table_data[row][col_index] for row in range(rows)]

                # 判断第一行是否为列名
                first_row_is_header = True
                print("正在判断第一行数据是否为列名...")
                try:
                    float(column_data[0])
                    first_row_is_header = False

                except (ValueError, TypeError):
                    print("第一行数据无法转换为浮点数，判定第一行为列名。")

                if first_row_is_header:
                    valid_column_data = column_data[1:]
                else:
                    valid_column_data = column_data

                # 再剔除无效数据
                final_column_data = []
                for i, cell_value in enumerate(valid_column_data):
                    if cell_value is not None and cell_value.strip():
                        try:
                            final_column_data.append(float(cell_value))
                        except ValueError:
                            print(
                                f"列 {column_name} 第 {i + 2 if first_row_is_header else i + 1} 行数据 '{cell_value}' 无法转换为浮点数，已剔除。")

                if not final_column_data:
                    print(f"列 {column_name} 没有有效的数值数据。")
                    continue

                # 打印进行单比率检验的数据
                print(f"列 {column_name} 用于单比率检验的数据: {final_column_data}")

                # 检查数据的区分值数量是否超过两个
                unique_values = set(final_column_data)
                if len(unique_values) > 2:
                    print(f"列 {column_name} 的数据区分值超过两个，不符合单比率检验要求，跳过该列。")
                    continue

                # 计算事件数和试验数
                first_value = next(iter(unique_values))
                event_count = sum([1 for val in final_column_data if val == first_value])
                trial_count = len(final_column_data)

                # 计算样本比率
                sample_ratio = event_count / trial_count

                result_text = f"列 {column_name} 的统计结果：事件数: {event_count}，试验数: {trial_count}，样本比率: {sample_ratio}"
                self.main_window.display_text(result_text)

                # 加入事件等于什么的信息
                event_info = f"列 {column_name} 中，事件是指值为 {first_value} 的数据"
                self.main_window.display_text(event_info)

                # 计算 95% 置信区间
                z = 1.96
                margin_of_error = z * ((sample_ratio * (1 - sample_ratio) / trial_count) ** 0.5)
                lower_bound = sample_ratio - margin_of_error
                upper_bound = sample_ratio + margin_of_error

                confidence_interval_text = f"列 {column_name} 的 95% 置信区间: ({lower_bound}, {upper_bound})"
                self.main_window.display_text(confidence_interval_text)

                # 检查是否进行假设检验，加入条件判断，如果点击了假设检验的复选框，则再进行假设比率的检验
                if self.checkBox.isChecked():
                    # 获取假设比率
                    try:
                        hypothesized_ratio = float(self.textEdit_6.toPlainText())
                        # 检查假设比率是否在合理范围（0 到 1 之间）
                        if not (0 <= hypothesized_ratio <= 1):
                            print("假设比率应在 0 到 1 之间，请输入有效的数字。")
                            return
                    except ValueError:
                        print("假设比率输入无效，请输入一个有效的数字。")
                        return

                    # 计算 z 值和 p 值
                    z_statistic = (sample_ratio - hypothesized_ratio) / (
                            (hypothesized_ratio * (1 - hypothesized_ratio) / trial_count) ** 0.5)
                    p_value = 2 * (1 - stats.norm.cdf(abs(z_statistic)))

                    self.main_window.display_text(f"假设比率: {hypothesized_ratio}")
                    self.main_window.display_text(f"z 值: {z_statistic}")
                    self.main_window.display_text(f"p 值: {p_value}")

                    # 判断是否拒绝原假设（假设显著性水平为 0.05）
                    if p_value < 0.05:
                        self.main_window.display_text("拒绝原假设，样本比率与假设比率有显著差异。")
                    else:
                        self.main_window.display_text("无法拒绝原假设，样本比率与假设比率无显著差异。")

            except Exception as e:
                print(f"处理列 {column_name} 时发生未知错误: {e}")

